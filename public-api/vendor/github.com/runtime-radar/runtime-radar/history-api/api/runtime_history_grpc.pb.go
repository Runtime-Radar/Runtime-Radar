// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: runtime_history.proto

package api

import (
	context "context"

	api "github.com/runtime-radar/runtime-radar/event-processor/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RuntimeHistory_Read_FullMethodName                    = "/runtime_history.RuntimeHistory/Read"
	RuntimeHistory_ListRuntimeEventSlice_FullMethodName   = "/runtime_history.RuntimeHistory/ListRuntimeEventSlice"
	RuntimeHistory_FilterRuntimeEventSlice_FullMethodName = "/runtime_history.RuntimeHistory/FilterRuntimeEventSlice"
)

// RuntimeHistoryClient is the client API for RuntimeHistory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeHistoryClient interface {
	Read(ctx context.Context, in *ReadRuntimeEventReq, opts ...grpc.CallOption) (*api.RuntimeEvent, error)
	ListRuntimeEventSlice(ctx context.Context, in *ListRuntimeEventSliceReq, opts ...grpc.CallOption) (*ListRuntimeEventSliceResp, error)
	FilterRuntimeEventSlice(ctx context.Context, in *FilterRuntimeEventSliceReq, opts ...grpc.CallOption) (*ListRuntimeEventSliceResp, error)
}

type runtimeHistoryClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeHistoryClient(cc grpc.ClientConnInterface) RuntimeHistoryClient {
	return &runtimeHistoryClient{cc}
}

func (c *runtimeHistoryClient) Read(ctx context.Context, in *ReadRuntimeEventReq, opts ...grpc.CallOption) (*api.RuntimeEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.RuntimeEvent)
	err := c.cc.Invoke(ctx, RuntimeHistory_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeHistoryClient) ListRuntimeEventSlice(ctx context.Context, in *ListRuntimeEventSliceReq, opts ...grpc.CallOption) (*ListRuntimeEventSliceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRuntimeEventSliceResp)
	err := c.cc.Invoke(ctx, RuntimeHistory_ListRuntimeEventSlice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeHistoryClient) FilterRuntimeEventSlice(ctx context.Context, in *FilterRuntimeEventSliceReq, opts ...grpc.CallOption) (*ListRuntimeEventSliceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRuntimeEventSliceResp)
	err := c.cc.Invoke(ctx, RuntimeHistory_FilterRuntimeEventSlice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeHistoryServer is the server API for RuntimeHistory service.
// All implementations must embed UnimplementedRuntimeHistoryServer
// for forward compatibility.
type RuntimeHistoryServer interface {
	Read(context.Context, *ReadRuntimeEventReq) (*api.RuntimeEvent, error)
	ListRuntimeEventSlice(context.Context, *ListRuntimeEventSliceReq) (*ListRuntimeEventSliceResp, error)
	FilterRuntimeEventSlice(context.Context, *FilterRuntimeEventSliceReq) (*ListRuntimeEventSliceResp, error)
	mustEmbedUnimplementedRuntimeHistoryServer()
}

// UnimplementedRuntimeHistoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuntimeHistoryServer struct{}

func (UnimplementedRuntimeHistoryServer) Read(context.Context, *ReadRuntimeEventReq) (*api.RuntimeEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedRuntimeHistoryServer) ListRuntimeEventSlice(context.Context, *ListRuntimeEventSliceReq) (*ListRuntimeEventSliceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuntimeEventSlice not implemented")
}
func (UnimplementedRuntimeHistoryServer) FilterRuntimeEventSlice(context.Context, *FilterRuntimeEventSliceReq) (*ListRuntimeEventSliceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterRuntimeEventSlice not implemented")
}
func (UnimplementedRuntimeHistoryServer) mustEmbedUnimplementedRuntimeHistoryServer() {}
func (UnimplementedRuntimeHistoryServer) testEmbeddedByValue()                        {}

// UnsafeRuntimeHistoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeHistoryServer will
// result in compilation errors.
type UnsafeRuntimeHistoryServer interface {
	mustEmbedUnimplementedRuntimeHistoryServer()
}

func RegisterRuntimeHistoryServer(s grpc.ServiceRegistrar, srv RuntimeHistoryServer) {
	// If the following call pancis, it indicates UnimplementedRuntimeHistoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RuntimeHistory_ServiceDesc, srv)
}

func _RuntimeHistory_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRuntimeEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeHistoryServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeHistory_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeHistoryServer).Read(ctx, req.(*ReadRuntimeEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeHistory_ListRuntimeEventSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuntimeEventSliceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeHistoryServer).ListRuntimeEventSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeHistory_ListRuntimeEventSlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeHistoryServer).ListRuntimeEventSlice(ctx, req.(*ListRuntimeEventSliceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeHistory_FilterRuntimeEventSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRuntimeEventSliceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeHistoryServer).FilterRuntimeEventSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeHistory_FilterRuntimeEventSlice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeHistoryServer).FilterRuntimeEventSlice(ctx, req.(*FilterRuntimeEventSliceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeHistory_ServiceDesc is the grpc.ServiceDesc for RuntimeHistory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeHistory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runtime_history.RuntimeHistory",
	HandlerType: (*RuntimeHistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _RuntimeHistory_Read_Handler,
		},
		{
			MethodName: "ListRuntimeEventSlice",
			Handler:    _RuntimeHistory_ListRuntimeEventSlice_Handler,
		},
		{
			MethodName: "FilterRuntimeEventSlice",
			Handler:    _RuntimeHistory_FilterRuntimeEventSlice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runtime_history.proto",
}
