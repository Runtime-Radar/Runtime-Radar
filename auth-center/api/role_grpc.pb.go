// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: role.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoleController_Read_FullMethodName     = "/role.RoleController/Read"
	RoleController_ReadList_FullMethodName = "/role.RoleController/ReadList"
)

// RoleControllerClient is the client API for RoleController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The role service definition.
type RoleControllerClient interface {
	// Get role by id
	Read(ctx context.Context, in *ReadRoleReq, opts ...grpc.CallOption) (*ReadRoleResp, error)
	// Get list of all roles
	ReadList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadListRoleResp, error)
}

type roleControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleControllerClient(cc grpc.ClientConnInterface) RoleControllerClient {
	return &roleControllerClient{cc}
}

func (c *roleControllerClient) Read(ctx context.Context, in *ReadRoleReq, opts ...grpc.CallOption) (*ReadRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadRoleResp)
	err := c.cc.Invoke(ctx, RoleController_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleControllerClient) ReadList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadListRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadListRoleResp)
	err := c.cc.Invoke(ctx, RoleController_ReadList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleControllerServer is the server API for RoleController service.
// All implementations must embed UnimplementedRoleControllerServer
// for forward compatibility.
//
// The role service definition.
type RoleControllerServer interface {
	// Get role by id
	Read(context.Context, *ReadRoleReq) (*ReadRoleResp, error)
	// Get list of all roles
	ReadList(context.Context, *emptypb.Empty) (*ReadListRoleResp, error)
	mustEmbedUnimplementedRoleControllerServer()
}

// UnimplementedRoleControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoleControllerServer struct{}

func (UnimplementedRoleControllerServer) Read(context.Context, *ReadRoleReq) (*ReadRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedRoleControllerServer) ReadList(context.Context, *emptypb.Empty) (*ReadListRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadList not implemented")
}
func (UnimplementedRoleControllerServer) mustEmbedUnimplementedRoleControllerServer() {}
func (UnimplementedRoleControllerServer) testEmbeddedByValue()                        {}

// UnsafeRoleControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleControllerServer will
// result in compilation errors.
type UnsafeRoleControllerServer interface {
	mustEmbedUnimplementedRoleControllerServer()
}

func RegisterRoleControllerServer(s grpc.ServiceRegistrar, srv RoleControllerServer) {
	// If the following call pancis, it indicates UnimplementedRoleControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoleController_ServiceDesc, srv)
}

func _RoleController_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleControllerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleController_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleControllerServer).Read(ctx, req.(*ReadRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleController_ReadList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleControllerServer).ReadList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleController_ReadList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleControllerServer).ReadList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleController_ServiceDesc is the grpc.ServiceDesc for RoleController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "role.RoleController",
	HandlerType: (*RoleControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _RoleController_Read_Handler,
		},
		{
			MethodName: "ReadList",
			Handler:    _RoleController_ReadList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}
