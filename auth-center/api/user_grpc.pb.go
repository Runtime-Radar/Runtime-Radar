// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: user.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserController_Create_FullMethodName         = "/user.UserController/Create"
	UserController_Read_FullMethodName           = "/user.UserController/Read"
	UserController_ReadList_FullMethodName       = "/user.UserController/ReadList"
	UserController_Update_FullMethodName         = "/user.UserController/Update"
	UserController_Delete_FullMethodName         = "/user.UserController/Delete"
	UserController_ChangePassword_FullMethodName = "/user.UserController/ChangePassword"
)

// UserControllerClient is the client API for UserController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The user service definition.
type UserControllerClient interface {
	// Create new user
	Create(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*UserResp, error)
	// Get information about user by id
	Read(ctx context.Context, in *ReadUserReq, opts ...grpc.CallOption) (*UserResp, error)
	// Get information about all users
	ReadList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserListResp, error)
	// Update information about user
	Update(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UserResp, error)
	// Delete user
	Delete(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
	// Change user password
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*SignInResp, error)
}

type userControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserControllerClient(cc grpc.ClientConnInterface) UserControllerClient {
	return &userControllerClient{cc}
}

func (c *userControllerClient) Create(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*UserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserController_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControllerClient) Read(ctx context.Context, in *ReadUserReq, opts ...grpc.CallOption) (*UserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserController_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControllerClient) ReadList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, UserController_ReadList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControllerClient) Update(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResp)
	err := c.cc.Invoke(ctx, UserController_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControllerClient) Delete(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResp)
	err := c.cc.Invoke(ctx, UserController_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userControllerClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*SignInResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInResp)
	err := c.cc.Invoke(ctx, UserController_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserControllerServer is the server API for UserController service.
// All implementations must embed UnimplementedUserControllerServer
// for forward compatibility.
//
// The user service definition.
type UserControllerServer interface {
	// Create new user
	Create(context.Context, *CreateUserReq) (*UserResp, error)
	// Get information about user by id
	Read(context.Context, *ReadUserReq) (*UserResp, error)
	// Get information about all users
	ReadList(context.Context, *emptypb.Empty) (*UserListResp, error)
	// Update information about user
	Update(context.Context, *UpdateUserReq) (*UserResp, error)
	// Delete user
	Delete(context.Context, *DeleteUserReq) (*DeleteUserResp, error)
	// Change user password
	ChangePassword(context.Context, *ChangePasswordReq) (*SignInResp, error)
	mustEmbedUnimplementedUserControllerServer()
}

// UnimplementedUserControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserControllerServer struct{}

func (UnimplementedUserControllerServer) Create(context.Context, *CreateUserReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserControllerServer) Read(context.Context, *ReadUserReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedUserControllerServer) ReadList(context.Context, *emptypb.Empty) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadList not implemented")
}
func (UnimplementedUserControllerServer) Update(context.Context, *UpdateUserReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserControllerServer) Delete(context.Context, *DeleteUserReq) (*DeleteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserControllerServer) ChangePassword(context.Context, *ChangePasswordReq) (*SignInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserControllerServer) mustEmbedUnimplementedUserControllerServer() {}
func (UnimplementedUserControllerServer) testEmbeddedByValue()                        {}

// UnsafeUserControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserControllerServer will
// result in compilation errors.
type UnsafeUserControllerServer interface {
	mustEmbedUnimplementedUserControllerServer()
}

func RegisterUserControllerServer(s grpc.ServiceRegistrar, srv UserControllerServer) {
	// If the following call pancis, it indicates UnimplementedUserControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserController_ServiceDesc, srv)
}

func _UserController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControllerServer).Create(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserController_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControllerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserController_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControllerServer).Read(ctx, req.(*ReadUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserController_ReadList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControllerServer).ReadList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserController_ReadList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControllerServer).ReadList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControllerServer).Update(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControllerServer).Delete(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserController_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserControllerServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserController_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserControllerServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserController_ServiceDesc is the grpc.ServiceDesc for UserController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserController",
	HandlerType: (*UserControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserController_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _UserController_Read_Handler,
		},
		{
			MethodName: "ReadList",
			Handler:    _UserController_ReadList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserController_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserController_Delete_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserController_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
