// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: rule.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RuleController_Create_FullMethodName             = "/rule.RuleController/Create"
	RuleController_Read_FullMethodName               = "/rule.RuleController/Read"
	RuleController_Update_FullMethodName             = "/rule.RuleController/Update"
	RuleController_Delete_FullMethodName             = "/rule.RuleController/Delete"
	RuleController_ListPage_FullMethodName           = "/rule.RuleController/ListPage"
	RuleController_NotifyTargetsInUse_FullMethodName = "/rule.RuleController/NotifyTargetsInUse"
)

// RuleControllerClient is the client API for RuleController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The RuleController service definition.
type RuleControllerClient interface {
	Create(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*CreateRuleResp, error)
	Read(ctx context.Context, in *ReadRuleReq, opts ...grpc.CallOption) (*ReadRuleResp, error)
	Update(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteRuleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPage(ctx context.Context, in *ListRulePageReq, opts ...grpc.CallOption) (*ListRulePageResp, error)
	// NotifyTargetsInUse returns true if at least one of given notification targets used by rule.
	// Method is not considering softly deleted rules.
	NotifyTargetsInUse(ctx context.Context, in *NotifyTargetsInUseReq, opts ...grpc.CallOption) (*NotifyTargetsInUseResp, error)
}

type ruleControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleControllerClient(cc grpc.ClientConnInterface) RuleControllerClient {
	return &ruleControllerClient{cc}
}

func (c *ruleControllerClient) Create(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*CreateRuleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRuleResp)
	err := c.cc.Invoke(ctx, RuleController_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleControllerClient) Read(ctx context.Context, in *ReadRuleReq, opts ...grpc.CallOption) (*ReadRuleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadRuleResp)
	err := c.cc.Invoke(ctx, RuleController_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleControllerClient) Update(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RuleController_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleControllerClient) Delete(ctx context.Context, in *DeleteRuleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RuleController_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleControllerClient) ListPage(ctx context.Context, in *ListRulePageReq, opts ...grpc.CallOption) (*ListRulePageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRulePageResp)
	err := c.cc.Invoke(ctx, RuleController_ListPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleControllerClient) NotifyTargetsInUse(ctx context.Context, in *NotifyTargetsInUseReq, opts ...grpc.CallOption) (*NotifyTargetsInUseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyTargetsInUseResp)
	err := c.cc.Invoke(ctx, RuleController_NotifyTargetsInUse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleControllerServer is the server API for RuleController service.
// All implementations must embed UnimplementedRuleControllerServer
// for forward compatibility.
//
// The RuleController service definition.
type RuleControllerServer interface {
	Create(context.Context, *Rule) (*CreateRuleResp, error)
	Read(context.Context, *ReadRuleReq) (*ReadRuleResp, error)
	Update(context.Context, *Rule) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteRuleReq) (*emptypb.Empty, error)
	ListPage(context.Context, *ListRulePageReq) (*ListRulePageResp, error)
	// NotifyTargetsInUse returns true if at least one of given notification targets used by rule.
	// Method is not considering softly deleted rules.
	NotifyTargetsInUse(context.Context, *NotifyTargetsInUseReq) (*NotifyTargetsInUseResp, error)
	mustEmbedUnimplementedRuleControllerServer()
}

// UnimplementedRuleControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuleControllerServer struct{}

func (UnimplementedRuleControllerServer) Create(context.Context, *Rule) (*CreateRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRuleControllerServer) Read(context.Context, *ReadRuleReq) (*ReadRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedRuleControllerServer) Update(context.Context, *Rule) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRuleControllerServer) Delete(context.Context, *DeleteRuleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRuleControllerServer) ListPage(context.Context, *ListRulePageReq) (*ListRulePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPage not implemented")
}
func (UnimplementedRuleControllerServer) NotifyTargetsInUse(context.Context, *NotifyTargetsInUseReq) (*NotifyTargetsInUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTargetsInUse not implemented")
}
func (UnimplementedRuleControllerServer) mustEmbedUnimplementedRuleControllerServer() {}
func (UnimplementedRuleControllerServer) testEmbeddedByValue()                        {}

// UnsafeRuleControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleControllerServer will
// result in compilation errors.
type UnsafeRuleControllerServer interface {
	mustEmbedUnimplementedRuleControllerServer()
}

func RegisterRuleControllerServer(s grpc.ServiceRegistrar, srv RuleControllerServer) {
	// If the following call pancis, it indicates UnimplementedRuleControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RuleController_ServiceDesc, srv)
}

func _RuleController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleControllerServer).Create(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleController_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleControllerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleController_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleControllerServer).Read(ctx, req.(*ReadRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleControllerServer).Update(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleControllerServer).Delete(ctx, req.(*DeleteRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleController_ListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleControllerServer).ListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleController_ListPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleControllerServer).ListPage(ctx, req.(*ListRulePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleController_NotifyTargetsInUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyTargetsInUseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleControllerServer).NotifyTargetsInUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleController_NotifyTargetsInUse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleControllerServer).NotifyTargetsInUse(ctx, req.(*NotifyTargetsInUseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleController_ServiceDesc is the grpc.ServiceDesc for RuleController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rule.RuleController",
	HandlerType: (*RuleControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RuleController_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _RuleController_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RuleController_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RuleController_Delete_Handler,
		},
		{
			MethodName: "ListPage",
			Handler:    _RuleController_ListPage_Handler,
		},
		{
			MethodName: "NotifyTargetsInUse",
			Handler:    _RuleController_NotifyTargetsInUse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rule.proto",
}
