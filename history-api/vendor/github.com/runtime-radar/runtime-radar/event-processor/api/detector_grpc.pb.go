// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: detector.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DetectorController_Create_FullMethodName   = "/detector.DetectorController/Create"
	DetectorController_Delete_FullMethodName   = "/detector.DetectorController/Delete"
	DetectorController_ListPage_FullMethodName = "/detector.DetectorController/ListPage"
)

// DetectorControllerClient is the client API for DetectorController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectorControllerClient interface {
	Create(ctx context.Context, in *CreateDetectorReq, opts ...grpc.CallOption) (*CreateDetectorResp, error)
	Delete(ctx context.Context, in *DeleteDetectorReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPage(ctx context.Context, in *ListDetectorPageReq, opts ...grpc.CallOption) (*ListDetectorPageResp, error)
}

type detectorControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectorControllerClient(cc grpc.ClientConnInterface) DetectorControllerClient {
	return &detectorControllerClient{cc}
}

func (c *detectorControllerClient) Create(ctx context.Context, in *CreateDetectorReq, opts ...grpc.CallOption) (*CreateDetectorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDetectorResp)
	err := c.cc.Invoke(ctx, DetectorController_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectorControllerClient) Delete(ctx context.Context, in *DeleteDetectorReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DetectorController_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectorControllerClient) ListPage(ctx context.Context, in *ListDetectorPageReq, opts ...grpc.CallOption) (*ListDetectorPageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDetectorPageResp)
	err := c.cc.Invoke(ctx, DetectorController_ListPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectorControllerServer is the server API for DetectorController service.
// All implementations must embed UnimplementedDetectorControllerServer
// for forward compatibility.
type DetectorControllerServer interface {
	Create(context.Context, *CreateDetectorReq) (*CreateDetectorResp, error)
	Delete(context.Context, *DeleteDetectorReq) (*emptypb.Empty, error)
	ListPage(context.Context, *ListDetectorPageReq) (*ListDetectorPageResp, error)
	mustEmbedUnimplementedDetectorControllerServer()
}

// UnimplementedDetectorControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDetectorControllerServer struct{}

func (UnimplementedDetectorControllerServer) Create(context.Context, *CreateDetectorReq) (*CreateDetectorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDetectorControllerServer) Delete(context.Context, *DeleteDetectorReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDetectorControllerServer) ListPage(context.Context, *ListDetectorPageReq) (*ListDetectorPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPage not implemented")
}
func (UnimplementedDetectorControllerServer) mustEmbedUnimplementedDetectorControllerServer() {}
func (UnimplementedDetectorControllerServer) testEmbeddedByValue()                            {}

// UnsafeDetectorControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectorControllerServer will
// result in compilation errors.
type UnsafeDetectorControllerServer interface {
	mustEmbedUnimplementedDetectorControllerServer()
}

func RegisterDetectorControllerServer(s grpc.ServiceRegistrar, srv DetectorControllerServer) {
	// If the following call pancis, it indicates UnimplementedDetectorControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DetectorController_ServiceDesc, srv)
}

func _DetectorController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDetectorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectorController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorControllerServer).Create(ctx, req.(*CreateDetectorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectorController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDetectorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectorController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorControllerServer).Delete(ctx, req.(*DeleteDetectorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectorController_ListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetectorPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorControllerServer).ListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectorController_ListPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorControllerServer).ListPage(ctx, req.(*ListDetectorPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DetectorController_ServiceDesc is the grpc.ServiceDesc for DetectorController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetectorController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "detector.DetectorController",
	HandlerType: (*DetectorControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DetectorController_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DetectorController_Delete_Handler,
		},
		{
			MethodName: "ListPage",
			Handler:    _DetectorController_ListPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "detector.proto",
}
