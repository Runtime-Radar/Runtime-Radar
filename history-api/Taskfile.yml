version: '3'

vars:
  APP_NAME: history-api
  DOCKER_IMAGE: history-api
  PWD:
    sh: "echo `pwd`"
  TOOLS_BIN: "{{.PWD}}/bin"
env:
  DOCKER_BUILDKIT: 1

tasks:
  proto:
    deps: [protoc-plugins]
    vars:
      PROTO_DIR: api
    cmds:
      - |
        PATH="{{.TOOLS_BIN}}{{if eq OS "windows"}};{{else}}:{{end}}$PATH"
        protoc -I api \
        --go_opt=paths=source_relative \
        --go_out={{.PROTO_DIR}} \
        --go-grpc_opt=paths=source_relative \
        --go-grpc_out={{.PROTO_DIR}} \
        --grpc-gateway_opt=paths=source_relative \
        --grpc-gateway_opt=logtostderr=true \
        --grpc-gateway_out={{.PROTO_DIR}} \
        --openapiv2_opt=logtostderr=true \
        --openapiv2_out={{.PROTO_DIR}}/openapiv2 \
        \
        --go_opt=Mtetragon/capabilities.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --go_opt=Mtetragon/events.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --go_opt=Mtetragon/sensors.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --go_opt=Mtetragon/stack.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --go_opt=Mtetragon/tetragon.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --go_opt=Mevent-processor/runtime_event.proto="github.com/runtime-radar/runtime-radar/event-processor/api" \
        \
        --go-grpc_opt=Mtetragon/capabilities.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --go-grpc_opt=Mtetragon/events.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --go-grpc_opt=Mtetragon/sensors.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --go-grpc_opt=Mtetragon/stack.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --go-grpc_opt=Mtetragon/tetragon.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --go-grpc_opt=Mevent-processor/runtime_event.proto="github.com/runtime-radar/runtime-radar/event-processor/api" \
        \
        --grpc-gateway_opt=Mtetragon/capabilities.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --grpc-gateway_opt=Mtetragon/events.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --grpc-gateway_opt=Mtetragon/sensors.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --grpc-gateway_opt=Mtetragon/stack.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --grpc-gateway_opt=Mtetragon/tetragon.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        \
        --openapiv2_opt=Mtetragon/capabilities.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --openapiv2_opt=Mtetragon/events.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --openapiv2_opt=Mtetragon/sensors.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --openapiv2_opt=Mtetragon/stack.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --openapiv2_opt=Mtetragon/tetragon.proto="github.com/cilium/tetragon/api/v1/tetragon" \
        --openapiv2_opt=Mevent-processor/runtime_event.proto="github.com/runtime-radar/runtime-radar/event-processor/api" \
        \
        {{.PROTO_DIR}}/*.proto
    sources:
      - "{{.PROTO_DIR}}/**/*.proto"
      - "go.mod"
    generates:
      - "{{.PROTO_DIR}}/**/*pb*.go"
  build:
    vars:
      BUILD_RELEASE:
        sh: echo "${BUILD_RELEASE:-$(git describe --tags 2> /dev/null || echo 'v0.0.0')}"
      BUILD_BRANCH:
        sh: echo "${BUILD_BRANCH:-$(git rev-parse --abbrev-ref HEAD)}"
      BUILD_COMMIT:
        sh: echo "${BUILD_COMMIT:-$(git rev-parse --short HEAD)}"
      BUILD_DATE: '{{now.Format "2006-01-02_15:04:05"}}'
      MODULE_NAME:
        sh: go list -m
    cmds:
     - |
        CGO_ENABLED=0 go build -ldflags "-X {{.MODULE_NAME}}/pkg/build.Release={{.BUILD_RELEASE}} -X {{.MODULE_NAME}}/pkg/build.Branch={{.BUILD_BRANCH}} -X {{.MODULE_NAME}}/pkg/build.Commit={{.BUILD_COMMIT}} -X {{.MODULE_NAME}}/pkg/build.Date={{.BUILD_DATE}}" \
        -o cmd/{{.APP_NAME}}/ ./cmd/{{.APP_NAME}}

  test:
    cmds:
      # Commands separated in order to be able to pass command line parameters to E2E tests and use different `go test` arguments
      - go test -race -count=1 -vet=off ./cmd/{{.APP_NAME}}
      - go test -race -count=1 ./pkg/...

  test-docker:
    cmds:
      - docker compose -f docker-compose.test.yml up --build --abort-on-container-exit test
      - defer: docker compose -f docker-compose.test.yml down

  lint:
    deps: [tools]
    cmds:
      - '{{printf "%s/golangci-lint" .TOOLS_BIN | toSlash}} run'

  vuln:
    deps: [tools]
    cmds:
      - '{{printf "%s/govulncheck" .TOOLS_BIN | toSlash}} ./...'

  mod:
    cmds:
      - go mod download

  clean:
    cmds:
      - rm -f bin/*
      - rm -f cmd/{{.APP_NAME}}/{{.APP_NAME}}{{exeExt}}

  tidy:
    cmds:
      - go mod tidy

  vendor:
      cmds:
      - go mod vendor

  generate:
    cmds:
      - go generate ./...

  certs:
    cmds:
      - go run "$(go env GOROOT)/src/crypto/tls/generate_cert.go" -host=127.0.0.1
      - mv cert.pem key.pem cmd/{{.APP_NAME}}
      - cp cmd/{{.APP_NAME}}/cert.pem cmd/{{.APP_NAME}}/ca.pem

  docker-build:
    vars:
      BUILD_RELEASE:
        sh: git describe --tags 2> /dev/null || echo "v0.0.0"
      BUILD_BRANCH:
        sh: git rev-parse --abbrev-ref HEAD
      BUILD_COMMIT:
        sh: git rev-parse --short HEAD
    cmds:
      - docker build --build-arg BUILD_RELEASE={{.BUILD_RELEASE}} --build-arg BUILD_BRANCH={{.BUILD_BRANCH}} --build-arg BUILD_COMMIT={{.BUILD_COMMIT}} --tag {{.DOCKER_IMAGE}} .

  docker-push:
    vars:
      IMAGE_TAG:
        sh: echo "${IMAGE_TAG:-$(git describe --tags 2> /dev/null || echo 'v0.0.0')}"
      IMAGE: "{{.IMAGE_REGISTRY}}/{{.DOCKER_IMAGE}}:{{.IMAGE_TAG}}"
    requires:
      vars: [IMAGE_REGISTRY]
    cmds:
      - docker tag {{.DOCKER_IMAGE}} {{.IMAGE}}
      - docker push {{.IMAGE}}

  tools:
    status:
      - test -e {{.TOOLS_BIN}}/golangci-lint{{exeExt}}
      - test -e {{.TOOLS_BIN}}/govulncheck{{exeExt}}
    cmds:
        - GOBIN={{.TOOLS_BIN}} go install github.com/golangci/golangci-lint/cmd/golangci-lint
        - GOBIN={{.TOOLS_BIN}} go install golang.org/x/vuln/cmd/govulncheck

  protoc-plugins:
    sources:
      - "pkg/tools/tools.go"
      - "go.mod"
    generates:
      - '{{.TOOLS_BIN}}/protoc-gen-grpc-gateway{{exeExt}}'
      - '{{.TOOLS_BIN}}/protoc-gen-openapiv2{{exeExt}}'
      - '{{.TOOLS_BIN}}/protoc-gen-go{{exeExt}}'
      - '{{.TOOLS_BIN}}/protoc-gen-go-grpc{{exeExt}}'
    cmds:
      - GOBIN={{.TOOLS_BIN}} go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway
      - GOBIN={{.TOOLS_BIN}} go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
      - GOBIN={{.TOOLS_BIN}} go install google.golang.org/protobuf/cmd/protoc-gen-go
      - GOBIN={{.TOOLS_BIN}} go install google.golang.org/grpc/cmd/protoc-gen-go-grpc

  deploy:
    sources:
      - vendor/modules.txt
      - go.mod
      - go.sum
      - cmd/**/*.go
      - pkg/**/*.go
      - internal/**/*.go
      - Dockerfile
    vars:
      DEPLOY_TAG: |-
        {{- $l := splitList "" "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"}}
        {{- range until 7}}
          {{- randInt 0 (len $l) | index $l}}
        {{- end}}
    requires:
      vars: [IMAGE_REGISTRY]
    preconditions:
      - sh: test -n "{{.IMAGE_REGISTRY}}"
        msg: IMAGE_REGISTRY is not set
    cmds:
      - task: docker-build
      - task: _push_deploy
        vars:
          DEPLOY_TAG: {ref: .DEPLOY_TAG}
          IMAGE_REGISTRY: {ref: .IMAGE_REGISTRY}
          DEPLOY_IMAGE_REGISTRY: {ref: .DEPLOY_IMAGE_REGISTRY}

  _push_deploy:
    internal: true
    label: deploy
    requires:
      vars: [IMAGE_REGISTRY, DEPLOY_TAG]
    vars:
      DEPLOY_IMAGE: '{{trimSuffix "/" (default .IMAGE_REGISTRY .DEPLOY_IMAGE_REGISTRY)}}/{{.DOCKER_IMAGE}}:{{.DEPLOY_TAG}}'
      PUSH_IMAGE: '{{trimSuffix "/" .IMAGE_REGISTRY}}/{{.DOCKER_IMAGE}}:{{.DEPLOY_TAG}}'
      CS_NAMESPACE: '{{default "cs" .CS_NAMESPACE}}'
    cmds:
      - docker image tag {{.DOCKER_IMAGE}} {{.PUSH_IMAGE}}
      - defer: docker image rm {{.PUSH_IMAGE}}
      - docker image push {{.PUSH_IMAGE}}
      - |
        kubectl patch deployment {{.APP_NAME}} -n {{.CS_NAMESPACE}} --patch '{"spec": {"template": {"spec": {"containers": [{"name": "{{.APP_NAME}}", "image": "{{.DEPLOY_IMAGE}}", "imagePullPolicy": "Always"}]}}}}'
