// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: cluster.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClusterController_Create_FullMethodName               = "/cluster.ClusterController/Create"
	ClusterController_Read_FullMethodName                 = "/cluster.ClusterController/Read"
	ClusterController_Update_FullMethodName               = "/cluster.ClusterController/Update"
	ClusterController_Delete_FullMethodName               = "/cluster.ClusterController/Delete"
	ClusterController_ListPage_FullMethodName             = "/cluster.ClusterController/ListPage"
	ClusterController_Register_FullMethodName             = "/cluster.ClusterController/Register"
	ClusterController_Unregister_FullMethodName           = "/cluster.ClusterController/Unregister"
	ClusterController_GenerateUninstallCmd_FullMethodName = "/cluster.ClusterController/GenerateUninstallCmd"
	ClusterController_GenerateInstallCmd_FullMethodName   = "/cluster.ClusterController/GenerateInstallCmd"
	ClusterController_GenerateValuesYAML_FullMethodName   = "/cluster.ClusterController/GenerateValuesYAML"
	ClusterController_ListRegistered_FullMethodName       = "/cluster.ClusterController/ListRegistered"
)

// ClusterControllerClient is the client API for ClusterController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterControllerClient interface {
	Create(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*CreateClusterResp, error)
	Read(ctx context.Context, in *ReadClusterReq, opts ...grpc.CallOption) (*ReadClusterResp, error)
	Update(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPage(ctx context.Context, in *ListClusterPageReq, opts ...grpc.CallOption) (*ListClusterPageResp, error)
	Register(ctx context.Context, in *RegisterClusterReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Unregister(ctx context.Context, in *UnregisterClusterReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GenerateUninstallCmd(ctx context.Context, in *GenerateUninstallCmdReq, opts ...grpc.CallOption) (*GenerateUninstallCmdResp, error)
	GenerateInstallCmd(ctx context.Context, in *GenerateInstallCmdReq, opts ...grpc.CallOption) (*GenerateInstallCmdResp, error)
	GenerateValuesYAML(ctx context.Context, in *GenerateValuesReq, opts ...grpc.CallOption) (*GenerateValuesResp, error)
	ListRegistered(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListRegisteredResp, error)
}

type clusterControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterControllerClient(cc grpc.ClientConnInterface) ClusterControllerClient {
	return &clusterControllerClient{cc}
}

func (c *clusterControllerClient) Create(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*CreateClusterResp, error) {
	out := new(CreateClusterResp)
	err := c.cc.Invoke(ctx, ClusterController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterControllerClient) Read(ctx context.Context, in *ReadClusterReq, opts ...grpc.CallOption) (*ReadClusterResp, error) {
	out := new(ReadClusterResp)
	err := c.cc.Invoke(ctx, ClusterController_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterControllerClient) Update(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClusterController_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterControllerClient) Delete(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClusterController_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterControllerClient) ListPage(ctx context.Context, in *ListClusterPageReq, opts ...grpc.CallOption) (*ListClusterPageResp, error) {
	out := new(ListClusterPageResp)
	err := c.cc.Invoke(ctx, ClusterController_ListPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterControllerClient) Register(ctx context.Context, in *RegisterClusterReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClusterController_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterControllerClient) Unregister(ctx context.Context, in *UnregisterClusterReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClusterController_Unregister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterControllerClient) GenerateUninstallCmd(ctx context.Context, in *GenerateUninstallCmdReq, opts ...grpc.CallOption) (*GenerateUninstallCmdResp, error) {
	out := new(GenerateUninstallCmdResp)
	err := c.cc.Invoke(ctx, ClusterController_GenerateUninstallCmd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterControllerClient) GenerateInstallCmd(ctx context.Context, in *GenerateInstallCmdReq, opts ...grpc.CallOption) (*GenerateInstallCmdResp, error) {
	out := new(GenerateInstallCmdResp)
	err := c.cc.Invoke(ctx, ClusterController_GenerateInstallCmd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterControllerClient) GenerateValuesYAML(ctx context.Context, in *GenerateValuesReq, opts ...grpc.CallOption) (*GenerateValuesResp, error) {
	out := new(GenerateValuesResp)
	err := c.cc.Invoke(ctx, ClusterController_GenerateValuesYAML_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterControllerClient) ListRegistered(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListRegisteredResp, error) {
	out := new(ListRegisteredResp)
	err := c.cc.Invoke(ctx, ClusterController_ListRegistered_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterControllerServer is the server API for ClusterController service.
// All implementations must embed UnimplementedClusterControllerServer
// for forward compatibility
type ClusterControllerServer interface {
	Create(context.Context, *Cluster) (*CreateClusterResp, error)
	Read(context.Context, *ReadClusterReq) (*ReadClusterResp, error)
	Update(context.Context, *Cluster) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteClusterReq) (*emptypb.Empty, error)
	ListPage(context.Context, *ListClusterPageReq) (*ListClusterPageResp, error)
	Register(context.Context, *RegisterClusterReq) (*emptypb.Empty, error)
	Unregister(context.Context, *UnregisterClusterReq) (*emptypb.Empty, error)
	GenerateUninstallCmd(context.Context, *GenerateUninstallCmdReq) (*GenerateUninstallCmdResp, error)
	GenerateInstallCmd(context.Context, *GenerateInstallCmdReq) (*GenerateInstallCmdResp, error)
	GenerateValuesYAML(context.Context, *GenerateValuesReq) (*GenerateValuesResp, error)
	ListRegistered(context.Context, *emptypb.Empty) (*ListRegisteredResp, error)
	mustEmbedUnimplementedClusterControllerServer()
}

// UnimplementedClusterControllerServer must be embedded to have forward compatible implementations.
type UnimplementedClusterControllerServer struct {
}

func (UnimplementedClusterControllerServer) Create(context.Context, *Cluster) (*CreateClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedClusterControllerServer) Read(context.Context, *ReadClusterReq) (*ReadClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedClusterControllerServer) Update(context.Context, *Cluster) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedClusterControllerServer) Delete(context.Context, *DeleteClusterReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedClusterControllerServer) ListPage(context.Context, *ListClusterPageReq) (*ListClusterPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPage not implemented")
}
func (UnimplementedClusterControllerServer) Register(context.Context, *RegisterClusterReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedClusterControllerServer) Unregister(context.Context, *UnregisterClusterReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedClusterControllerServer) GenerateUninstallCmd(context.Context, *GenerateUninstallCmdReq) (*GenerateUninstallCmdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUninstallCmd not implemented")
}
func (UnimplementedClusterControllerServer) GenerateInstallCmd(context.Context, *GenerateInstallCmdReq) (*GenerateInstallCmdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInstallCmd not implemented")
}
func (UnimplementedClusterControllerServer) GenerateValuesYAML(context.Context, *GenerateValuesReq) (*GenerateValuesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateValuesYAML not implemented")
}
func (UnimplementedClusterControllerServer) ListRegistered(context.Context, *emptypb.Empty) (*ListRegisteredResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistered not implemented")
}
func (UnimplementedClusterControllerServer) mustEmbedUnimplementedClusterControllerServer() {}

// UnsafeClusterControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterControllerServer will
// result in compilation errors.
type UnsafeClusterControllerServer interface {
	mustEmbedUnimplementedClusterControllerServer()
}

func RegisterClusterControllerServer(s grpc.ServiceRegistrar, srv ClusterControllerServer) {
	s.RegisterService(&ClusterController_ServiceDesc, srv)
}

func _ClusterController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterControllerServer).Create(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterController_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterControllerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterController_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterControllerServer).Read(ctx, req.(*ReadClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterControllerServer).Update(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterControllerServer).Delete(ctx, req.(*DeleteClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterController_ListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterControllerServer).ListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterController_ListPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterControllerServer).ListPage(ctx, req.(*ListClusterPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterController_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterControllerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterController_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterControllerServer).Register(ctx, req.(*RegisterClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterController_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterControllerServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterController_Unregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterControllerServer).Unregister(ctx, req.(*UnregisterClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterController_GenerateUninstallCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUninstallCmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterControllerServer).GenerateUninstallCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterController_GenerateUninstallCmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterControllerServer).GenerateUninstallCmd(ctx, req.(*GenerateUninstallCmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterController_GenerateInstallCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInstallCmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterControllerServer).GenerateInstallCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterController_GenerateInstallCmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterControllerServer).GenerateInstallCmd(ctx, req.(*GenerateInstallCmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterController_GenerateValuesYAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterControllerServer).GenerateValuesYAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterController_GenerateValuesYAML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterControllerServer).GenerateValuesYAML(ctx, req.(*GenerateValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterController_ListRegistered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterControllerServer).ListRegistered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterController_ListRegistered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterControllerServer).ListRegistered(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterController_ServiceDesc is the grpc.ServiceDesc for ClusterController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ClusterController",
	HandlerType: (*ClusterControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ClusterController_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ClusterController_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClusterController_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClusterController_Delete_Handler,
		},
		{
			MethodName: "ListPage",
			Handler:    _ClusterController_ListPage_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ClusterController_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _ClusterController_Unregister_Handler,
		},
		{
			MethodName: "GenerateUninstallCmd",
			Handler:    _ClusterController_GenerateUninstallCmd_Handler,
		},
		{
			MethodName: "GenerateInstallCmd",
			Handler:    _ClusterController_GenerateInstallCmd_Handler,
		},
		{
			MethodName: "GenerateValuesYAML",
			Handler:    _ClusterController_GenerateValuesYAML_Handler,
		},
		{
			MethodName: "ListRegistered",
			Handler:    _ClusterController_ListRegistered_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}
