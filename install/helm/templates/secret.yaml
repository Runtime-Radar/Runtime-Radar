{{- if empty .Values.global.keys.existingSecret }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ include "common.cs.keysSecretName" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
data:
  {{- $encryption := include "cs.initSecretKey" (dict "context" . "value" .Values.global.keys.encryption "key" "encryption" "size" 32) }}
  {{- $publicAccessTokenSalt := include "cs.initSecretKey" (dict "context" . "value" .Values.global.keys.publicAccessTokenSalt "key" "publicAccessTokenSalt" "size" 64) }}
  encryption: {{ $encryption | required "A valid .Values.global.keys.encryption entry required!" | b64enc }}
  publicAccessTokenSalt: {{ $publicAccessTokenSalt | required "A valid .Values.global.keys.publicAccessTokenSalt entry required!" | b64enc }}
  token: {{ default (randBytes 32 | b64dec | printf "%x") .Values.global.keys.token | b64enc }}
{{- end }}

---
{{- if and .Values.postgresql.externalHost .Values.postgresql.deploy }}
{{- fail "postgresql.externalHost is not supported with postgresql.deploy" }}
{{- end }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: postgresql
  labels:
    {{- include "common.labels" . | nindent 4 }}
data:
  POSTGRES_ADDR: {{ .Values.postgresql.externalHost | default "postgresql" | b64enc }}
  POSTGRES_DB: {{ .Values.postgresql.auth.database | b64enc }}
  POSTGRES_USER: {{ .Values.postgresql.auth.username | b64enc }}
  POSTGRES_PASSWORD: {{ include "common.secrets.password" (dict "context" . "secret" "postgresql" "key" "POSTGRES_PASSWORD" "defaultValue" .Values.postgresql.auth.password) | b64enc }}
  POSTGRES_SSL_MODE: {{ .Values.global.postgresql.tls.enabled | toString | b64enc }}
  POSTGRES_SSL_CHECK_CERT: {{ .Values.global.postgresql.tls.verify | toString | b64enc }}
---
{{- if and .Values.redis.externalHost .Values.redis.deploy }}
{{- fail "redis.externalHost is not supported with redis.deploy" }}
{{- end }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: redis
  labels:
    {{- include "common.labels" . | nindent 4 }}
data:
  REDIS_ADDR: {{ .Values.redis.externalHost | default "redis" | b64enc }}
  REDIS_USER: {{ .Values.redis.auth.username | b64enc }}
  REDIS_PASSWORD: {{ include "common.secrets.password" (dict "context" . "secret" "redis" "key" "REDIS_PASSWORD" "defaultValue" .Values.redis.auth.password) | b64enc }}
  REDIS_TLS_MODE: {{ .Values.global.redis.tls.enabled | toString | b64enc }}
  REDIS_TLS_CHECK_CERT: {{ .Values.global.redis.tls.verify | toString | b64enc }}
---
{{- if and .Values.rabbitmq.externalHost .Values.rabbitmq.deploy }}
{{- fail "rabbitmq.externalHost is not supported with rabbitmq.deploy" }}
{{- end }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: rabbitmq
  labels:
    {{- include "common.labels" . | nindent 4 }}
data:
  RABBIT_ADDR: {{ .Values.rabbitmq.externalHost | default "rabbitmq" | b64enc }}
  RABBIT_USER: {{ .Values.rabbitmq.auth.username | b64enc }}
  RABBIT_PASSWORD: {{ include "common.secrets.password" (dict "context" . "secret" "rabbitmq" "key" "RABBIT_PASSWORD" "defaultValue" .Values.rabbitmq.auth.password) | b64enc }}
---
{{- if and .Values.clickhouse.externalHost .Values.clickhouse.deploy }}
{{- fail "clickhouse.externalHost is not supported with clickhouse.deploy" }}
{{- end }}
# Clickhouse credentials
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: clickhouse
  labels:
    {{- include "common.labels" . | nindent 4 }}
data:
  {{- $clickhousePort := .Values.global.clickhouse.tls.enabled | ternary "9440" "9000" }}
  {{- $clickhouseAddr := printf "clickhouse:%s" ($clickhousePort) }}
  CLICKHOUSE_ADDR: {{ .Values.clickhouse.externalHost | default $clickhouseAddr | b64enc }}
  CLICKHOUSE_DB: {{ .Values.clickhouse.auth.database | b64enc }}
  CLICKHOUSE_USER: {{ .Values.clickhouse.auth.username | b64enc }}
  CLICKHOUSE_PASSWORD: {{ include "common.secrets.password" (dict "context" . "secret" "clickhouse" "key" "CLICKHOUSE_PASSWORD" "defaultValue" .Values.clickhouse.auth.password) | b64enc }}
  CLICKHOUSE_SSL_MODE: {{ .Values.global.clickhouse.tls.enabled | toString | b64enc }}
  CLICKHOUSE_SSL_CHECK_CERT: {{ .Values.global.clickhouse.tls.verify | toString | b64enc }}

{{- if .Values.imagePullSecret.password }}
---
{{- if empty .Values.imagePullSecret.username }}
{{- fail "imagePullSecret.username should not be empty if imagePullSecret.password is set" }}
{{- else if not (has .Values.imagePullSecret.name .Values.global.imagePullSecrets) }}
{{- printf "global.imagePullSecrets must contain %s if imagePullSecret.password is set" .Values.imagePullSecret.name | fail }}
{{- end }}
# Registry credentials
apiVersion: v1
kind: Secret
type: kubernetes.io/dockerconfigjson
metadata:
  name: {{ .Values.imagePullSecret.name }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
data:
    .dockerconfigjson: {{ printf "{\"auths\": {\"%s\": {\"auth\": \"%s\"}}}" .Values.global.imageRegistry (printf "%s:%s" .Values.imagePullSecret.username .Values.imagePullSecret.password | b64enc) | b64enc }}
{{ end }}
