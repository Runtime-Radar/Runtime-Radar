{{/*
Generate files for tls

Usage:
{{ include "common.tls.generate" (dict "context" $ "secret" "secret-name" "caName" "ca" "clusterDomain" "cluster.local") }}

Params:
  - context - Context - Required - Parent context.
  - values - Map - Optional - section in values which contains tls section.
  - global - Map - Optional - section in global values which contains tls section.
  - secret - String - Optional - Name of the 'Secret' resource where the password is stored.
  - caName - String - Optional - Name of the CA.
  - caDaysValid - String - Optional - Days validity for the certificate.
  - services - List - Optional - List of services to add as alt name.
  - altNames - List - Optional - Alt names for CA cert.
  - prefix - String - Optional - Prefix of tls section for sane alert.
*/}}
{{- define "common.tls.generate" -}}
{{- $values := default .context.Values .values }}
{{- $global := default (get .context.Values.global .context.Chart.Name | default dict) .global }}
{{- $secret := default (include "common.tls.secretName" .context) .secret }}
{{- $crt := "" }}
{{- $key := "" }}
{{- $ca := "" }}
{{- if (pluck "lookup" ($values.tls) ($global.tls) (((.context.Values).global).tls) (dict "lookup" true) | first) }}
  {{- $crt = include "common.secrets.lookup" (dict "secret" $secret "key" "tls.crt" "context" .context) }}
  {{- $key = include "common.secrets.lookup" (dict "secret" $secret "key" "tls.key" "context" .context) }}
  {{- $ca = include "common.secrets.lookup" (dict "secret" $secret "key" "ca.crt" "context" .context) }}
{{- end }}
{{- if not (and $crt $key $ca) }}
  {{- $caGen := genCA (default (printf "%s-ca" .context.Chart.Name) .caName) (default 365 .caDaysValid) }}
  {{- $releaseNamespace := (include "common.namespace" .context) }}
  {{- $clusterDomain := default "cluster.local" .context.Values.clusterDomain }}
  {{- $fullname := include "common.fullname" .context }}
  {{- $serviceName := include "common.fullname" .context }}
  {{- $ipAddrs := list }}
  {{- $altNames := list }}
  {{- range default (list) .altNames }}
    {{- if regexMatch "^\\d+\\.\\d+\\.\\d+\\.\\d+$" . }}
    {{- $ipAddrs = append $ipAddrs . }}
    {{- else }}
    {{- $altNames = append $altNames . }}
    {{- end }}
  {{- else }}
    {{- $altNames = list (printf "*.%s.%s.svc.%s" $fullname $releaseNamespace $clusterDomain) (printf "%s.%s.svc.%s" $fullname $releaseNamespace $clusterDomain) "localhost" $fullname }}
  {{- end }}
  {{- range default (list) .services }}
    {{- $prependNames := list (printf "*.%s.%s.svc.%s" . $releaseNamespace $clusterDomain) (printf "%s.%s.svc.%s" . $releaseNamespace $clusterDomain) . }}
    {{- $altNames = concat $prependNames $altNames }}
  {{- end }}
  {{- $cert := genSignedCert $fullname $ipAddrs $altNames 365 $caGen }}
  {{- $crt = $cert.Cert | b64enc }}
  {{- $key = $cert.Key | b64enc }}
  {{- $ca = $caGen.Cert | b64enc }}
{{- end }}
tls.crt: {{ $crt | quote }}
tls.key: {{ $key | quote }}
ca.crt: {{ $ca | quote }}
{{- end -}}

{{/*
Generate files for tls

Usage:
{{ include "common.tls.generate" (dict "tls" .Values.tls "secret" "secret-name" "caName" "ca" "clusterDomain" "cluster.local" "context" $) }}

Params:
  - context - Context - Required - Parent context.
  - values - Map - Required - section in values which contains tls section.
  - global - Map - Required - section in global values which contains tls section.
  - secret - String - Optional - Name of the 'Secret' resource where the password is stored.
  - caName - String - Optional - Name of the CA.
  - caDaysValid - String - Optional - Days validity for the certificate.
  - services - List - Optional - List of services to add as alt name.
  - altNames - List - Optional - Alt names for CA cert.
  - prefix - String - Optional - Prefix of tls section for sane alert.
*/}}
{{- define "common.tls.generateSecret" -}}
{{- $values := default .context.Values .values }}
{{- $global := default (get .context.Values.global .context.Chart.Name | default dict) .global }}
{{- $autoGenerated := kindIs "bool" ($global.tls).autoGenerated | ternary ($global.tls).autoGenerated $values.tls.autoGenerated }}
{{- $cert := default $values.tls.cert ($global.tls).cert }}
{{- $certKey := default $values.tls.certKey ($global.tls).certKey }}
{{- $certCA := default $values.tls.certCA ($global.tls).certCA }}
{{- if and $autoGenerated (not $cert) (not $certKey) (not $certCA) }}
{{- include "common.tls.generate" . }}
{{- else }}
{{- $prefix := default "" .prefix }}
tls.crt: {{ required (printf "A valid %s.tls.cert entry required!" $prefix) $cert | b64enc | quote }}
tls.key: {{ required (printf "A valid %s.tls.certKey entry required!" $prefix) $certKey | b64enc | quote }}
{{- if $certCA }}
ca.crt: {{ $certCA | b64enc | quote }}
{{- end }}
{{- end }}
{{- end -}}

{{/*
Return TLS secret name
*/}}
{{- define "common.tls.existingSecret" -}}
{{- $global := (get (.Values.global | default dict) .Chart.Name | default dict) }}
{{- with default ($global.tls).existingSecret (.Values.tls).existingSecret -}}
    {{- printf "%s" (tpl . $) -}}
{{- end -}}
{{- end -}}

{{/*
Return true if TLS is enabled
*/}}
{{- define "common.tls.enabled" -}}
{{- $global := (get (.Values.global | default dict) .Chart.Name | default dict) -}}
{{- if and (kindIs "bool" ($global.tls).enabled) ($global.tls).enabled -}}
    {{- true -}}
{{- else if (.Values.tls).enabled -}}
    {{- true -}}
{{- end -}}
{{- end -}}

{{/*
Return true if a TLS secret object should be created
*/}}
{{- define "common.tls.createSecret" -}}
{{- if and (eq (include "common.tls.enabled" .) "true") (not (include "common.tls.existingSecret" .)) }}
    {{- true -}}
{{- end -}}
{{- end -}}

{{/*
Return the secret containing TLS certificates
*/}}
{{- define "common.tls.secretName" -}}
{{- with include "common.tls.existingSecret" . -}}
    {{- printf "%s" . -}}
{{- else -}}
    {{- printf "%s-crt" (include "common.fullname" .) -}}
{{- end -}}
{{- end -}}

{{/*
Validate values - TLS enabled
*/}}
{{- define "common.tls.validateValues" -}}
{{- $global := (get (.Values.global | default dict) .Chart.Name | default dict) }}
{{- $autoGenerated := kindIs "bool" ($global.tls).autoGenerated | ternary ($global.tls).autoGenerated .Values.tls.autoGenerated }}
{{- $cert := default .Values.tls.cert ($global.tls).cert }}
{{- $certKey := default .Values.tls.certKey ($global.tls).certKey }}
{{- $certCA := default .Values.tls.certCA ($global.tls).certCA }}
{{- if and (eq (include "common.tls.enabled" .) "true") (not $autoGenerated) (not (include "common.tls.existingSecret" .)) (not (and $certCA $cert $certKey)) -}}
{{.Chart.Name}}: tls
    You enabled TLS for {{.Chart.Name}} chart but you did not enable any of the available mechanisms to create the TLS secret.
    Please use any of these alternatives:
      - Provide an existing secret containing the TLS certificates using `tls.existingSecret`
      - Provide the plain text certificates using `tls.certCA`, `tls.cert` and `tls.certKey`.
      - Enable auto-generated certificates using `tls.autoGenerated`.
{{- end -}}
{{- end -}}
