# @section Global parameters
global:
  # -- Global Docker image registry
  imageRegistry: ""
  # -- Global Docker registry secret names as an array
  # e.g.
  # imagePullSecrets:
  #   - myRegistryKeySecretName
  imagePullSecrets: []
  # -- Global StorageClass for Persistent Volume(s)
  storageClass: ""
  postgresql:
    tls:
      # -- [boolean, nullable] Enable TLS traffic support (overrides `tls.enabled`)
      enabled: null
      # -- [boolean, nullable] Generate automatically self-signed TLS certificates (overrides `tls.autoGenerated`)
      autoGenerated: null
      # -- Name of an existing secret that contains the certificates (overrides `tls.existingSecret`)
      existingSecret: ""
      # -- Certificate value. Requires `tls.autoGenerated` to be `false` (overrides `tls.cert`)
      cert: ""
      # -- Certificate key value. Requires `tls.autoGenerated` to be `false` (overrides `tls.certKey`)
      certKey: ""
      # -- CA Certificate value. Requires `tls.autoGenerated` to be `false` (overrides `tls.certCA`)
      certCA: ""

# @section Common parameters
# -- String to partially override common.fullname template (will maintain the release name)
nameOverride: ""
# -- String to fully override common.fullname template
fullnameOverride: ""
# -- String to fully override common.namespace
namespaceOverride: ""
# -- Kubernetes Cluster Domain
clusterDomain: cluster.local
# -- Add labels to all the deployed resources
labels: {}
# -- Add annotations to all the deployed resources
annotations: {}
# -- Global Docker registry secret names as an array
# e.g.
# imagePullSecrets:
#   - myRegistryKeySecretName
imagePullSecrets: []

# @section PostgreSQL parameters
# PostgreSQL image version
# ref: https://hub.docker.com/r/postgres/tags/
image:
  # -- [default: REGISTRY_NAME] PostgreSQL image registry
  registry: ""
  # -- [default: REPOSITORY_NAME/postgresql] PostgreSQL image repository
  repository: postgres
  # @skip image.tag PostgreSQL image tag (immutable tags are recommended)
  tag: "17.5"
  # -- PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  digest: ""
  # -- PostgreSQL image pull policy
  pullPolicy: IfNotPresent
# Authentication
auth:
  # -- Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
  enablePostgresUser: false
  # -- Password for the "postgres" admin user. Ignored if `auth.existingSecret` is provided
  postgresPassword: ""
  # -- Name for a custom user to create
  username: ""
  # -- Password for the custom user to create. Ignored if `auth.existingSecret` is provided
  password: ""
  # -- Name for a custom database to create
  database: ""
  # -- Name of existing secret to use for PostgreSQL credentials. `auth.postgresPassword`, `auth.password`, and `auth.replicationPassword` will be ignored and picked up from this secret
  existingSecret: ""
  # -- Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
  existingSecretAdminPasswordKey: postgres-password
  # -- Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
  existingSecretPasswordKey: password
# TLS configuration
tls:
  # -- Enable TLS traffic support
  enabled: false
  # -- Generate automatically self-signed TLS certificates
  autoGenerated: false
  # -- Whether to use the server's TLS cipher preferences rather than the client's
  preferServerCiphers: true
  # -- Name of an existing secret that contains the certificates
  existingSecret: ""
  # -- Certificate filename
  certFilename: "tls.crt"
  # -- Certificate key filename
  certKeyFilename: "tls.key"
  # -- CA Certificate filename
  # If provided, PostgreSQL will authenticate TLS/SSL clients by requesting them a certificate
  # ref: https://www.postgresql.org/docs/9.6/auth-methods.html
  certCAFilename: "ca.crt"
  # -- File containing a Certificate Revocation List
  crlFilename: ""
  # -- Certificate value. Requires `tls.autoGenerated` to be `false`
  cert: ""
  # -- Certificate key value. Requires `tls.autoGenerated` to be `false`
  certKey: ""
  # -- CA Certificate value. Requires `tls.autoGenerated` to be `false`
  certCA: ""
# Postgres resource requests and limits
# ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# -- [object] Set container requests and limits for different resources like CPU or memory
resources:
  requests:
    cpu: 500m
    memory: 1024Mi
    ephemeral-storage: 50Mi
  limits:
    cpu: 1.0
    memory: 1536Mi
    ephemeral-storage: 1024Mi
# -- Shared preload libraries (comma-separated list)
postgresqlSharedPreloadLibraries: ""
# Start PostgreSQL pod(s) without limitations on shm memory.
# By default docker and containerd (and possibly other container runtimes) limit `/dev/shm` to `64M`
# ref: https://github.com/docker-library/postgres/issues/416
# ref: https://github.com/containerd/containerd/issues/3654
shmVolume:
  # -- Enable emptyDir volume for /dev/shm for PostgreSQL pod(s)
  enabled: true
  # -- Set this to enable a size limit on the shm tmpfs
  # Note: the size of the tmpfs counts against container's memory limit
  # e.g:
  # sizeLimit: 1Gi
  sizeLimit: ""
# @section PostgreSQL parameters
# -- PostgreSQL main configuration to be injected as ConfigMap
# ref: https://www.postgresql.org/docs/current/static/runtime-config.html
configuration: ""
# -- Name of an existing ConfigMap with PostgreSQL configuration
existingConfigmap: ""
# -- Map of labels to add to the pods
podLabels: {}
# -- Map of annotations to add to the pods
podAnnotations: {}
# -- Affinity for PostgreSQL pods assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}
# -- Node labels for PostgreSQL pods assignment
# ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
nodeSelector: {}
# -- Tolerations for PostgreSQL pods assignment
# ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []
# -- Seconds PostgreSQL pod needs to terminate gracefully
# ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
terminationGracePeriodSeconds: ""
# -- Array with extra environment variables to add to PostgreSQL nodes
# e.g:
# extraEnvVars:
#   - name: FOO
#     value: "bar"
extraEnvVars: []
# -- Optionally specify extra list of additional volumeMounts for the PostgreSQL container(s)
volumeMounts: []
# -- Optionally specify extra list of additional volumes for the PostgreSQL pod(s)
volumes: []
containerPorts:
  # -- PostgreSQL container port
  postgresql: 5432
# Pod Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext:
  # -- Enabled pods' Security Context
  enabled: true
  # -- Set filesystem group change policy
  fsGroupChangePolicy: Always
  # -- Set kernel settings using the sysctl interface
  sysctls: []
  # -- Set filesystem extra groups
  supplementalGroups: []
  # -- Group ID for the pod
  fsGroup: 1001
# Container Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext:
  # -- Enable containers' Security Context
  enabled: true
  # -- [object,nullable] Set SELinux options in container
  seLinuxOptions: {}
  # -- Set containers' Security Context runAsUser
  runAsUser: 1001
  # -- Set containers' Security Context runAsGroup
  runAsGroup: 1001
  # -- Set container's Security Context runAsNonRoot
  runAsNonRoot: true
  # -- Set container's Security Context privileged
  privileged: false
  # -- Set container's Security Context readOnlyRootFilesystem
  readOnlyRootFilesystem: true
  # -- Set container's Security Context allowPrivilegeEscalation
  allowPrivilegeEscalation: false
  capabilities:
    # -- List of capabilities to be dropped
    drop: ["ALL"]
  seccompProfile:
    # -- Set container's Security Context seccomp profile
    type: "RuntimeDefault"
# Configure extra options for PostgreSQL containers' liveness, readiness and startup probes
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
livenessProbe:
  # -- Enable livenessProbe on PostgreSQL containers
  enabled: true
  # -- Initial delay seconds for livenessProbe
  initialDelaySeconds: 30
  # -- Period seconds for livenessProbe
  periodSeconds: 10
  # -- Timeout seconds for livenessProbe
  timeoutSeconds: 5
  # -- Failure threshold for livenessProbe
  failureThreshold: 6
  # -- Success threshold for livenessProbe
  successThreshold: 1
readinessProbe:
  # -- Enable readinessProbe on PostgreSQL containers
  enabled: true
  # -- Initial delay seconds for readinessProbe
  initialDelaySeconds: 5
  # -- Period seconds for readinessProbe
  periodSeconds: 10
  # -- Timeout seconds for readinessProbe
  timeoutSeconds: 5
  # -- Failure threshold for readinessProbe
  failureThreshold: 6
  # -- Success threshold for readinessProbe
  successThreshold: 1
startupProbe:
  # -- Enable startupProbe on PostgreSQL containers
  enabled: false
  # -- Initial delay seconds for startupProbe
  initialDelaySeconds: 30
  # -- Period seconds for startupProbe
  periodSeconds: 10
  # -- Timeout seconds for startupProbe
  timeoutSeconds: 1
  # -- Failure threshold for startupProbe
  failureThreshold: 15
  # -- Success threshold for startupProbe
  successThreshold: 1
# @section Service Parameters
# PostgreSQL service configuration
service:
  # -- Kubernetes Service type
  type: ClusterIP
  ports:
    # -- PostgreSQL service port
    postgresql: 5432
  # -- Annotations for PostgreSQL service
  annotations: {}
  # Headless service properties
  headless:
    # -- Annotations for the headless service.
    annotations: {}
# @section Persistence Parameters
# PostgreSQL persistence configuration
persistence:
  # -- Enable PostgreSQL data persistence using PVC
  enabled: true
  # -- Name of an existing PVC to use
  existingClaim: ""
  # -- PVC Storage Class for PostgreSQL data volume
  # If defined, storageClassName: <storageClass>
  # If set to "-", storageClassName: "", which disables dynamic provisioning
  # If undefined (the default) or set to null, no storageClassName spec is
  #   set, choosing the default provisioner.  (gp2 on AWS, standard on
  #   GKE, AWS & OpenStack)
  storageClass: ""
  # -- PVC Access Mode for PostgreSQL volume
  accessModes:
    - ReadWriteOnce
  # -- PVC Storage Request for PostgreSQL volume
  size: 8Gi
  # -- Annotations for the PVC
  annotations: {}
  # -- Labels for the PVC
  labels: {}
  # -- Selector to match an existing Persistent Volume (this value is evaluated as a template)
  # selector:
  #   matchLabels:
  #     app: my-app
  selector: {}
  # -- Custom PVC data source
  dataSource: {}
  # -- PostgreSQL Persistent Volume Claim Retention Policy
  # ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
  # Example:
  #   whenScaled: Retain
  #   whenDeleted: Retain
  persistentVolumeClaimRetentionPolicy: {}
# @section Other Parameters
# Service account
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # -- Enable creation of ServiceAccount for PostgreSQL pod
  create: true
  # -- The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the common.fullname template
  name: ""
  # -- Allows auto mount of ServiceAccountToken on the serviceAccount created
  # Can be set to false if pods using this serviceAccount do not need to use K8s API
  automount: false
  # -- Additional custom annotations for the ServiceAccount
  annotations: {}
# @section Metrics Parameters
metrics:
  # -- Start a prometheus exporter
  enabled: false
  # -- PostgreSQL metrics external host
  externalHost: ""
  image:
    # -- [default: REGISTRY_NAME] PostgreSQL Prometheus Exporter image registry
    registry: ""
    # -- [default: REPOSITORY_NAME/postgres-exporter] PostgreSQL Prometheus Exporter image repository
    repository: quay.io/prometheuscommunity/postgres-exporter
    # @skip metrics.image.tag PostgreSQL Prometheus Exporter image tag (immutable tags are recommended)
    tag: v0.17.1
    # -- PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    digest: ""
    # -- PostgreSQL Prometheus Exporter image pull policy
    pullPolicy: IfNotPresent
  # -- Control enabled collectors
  # ref: https://github.com/prometheus-community/postgres_exporter#flags
  # Example:
  # collectors:
  #   wal: false
  collectors: {}
  # -- Define additional custom metrics
  # ref: https://github.com/prometheus-community/postgres_exporter#adding-new-metrics-via-a-config-file-deprecated
  # customMetrics:
  #   pg_database:
  #     query: "SELECT d.datname AS name, CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT') THEN pg_catalog.pg_database_size(d.datname) ELSE 0 END AS size_bytes FROM pg_catalog.pg_database d where datname not in ('template0', 'template1', 'postgres')"
  #     metrics:
  #       - name:
  #           usage: "LABEL"
  #           description: "Name of the database"
  #       - size_bytes:
  #           usage: "GAUGE"
  #           description: "Size of the database in bytes"
  customMetrics: {}
  # -- Extra environment variables to add to PostgreSQL Prometheus exporter
  # see: https://github.com/prometheus-community/postgres_exporter#environment-variables
  # For example:
  #  extraEnvVars:
  #  - name: PG_EXPORTER_DISABLE_DEFAULT_METRICS
  #    value: "true"
  extraEnvVars: []
  # PostgreSQL Prometheus exporter containers' Security Context
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  containerSecurityContext:
    # -- Enable containers' Security Context
    enabled: true
    # -- [object,nullable] Set SELinux options in container
    seLinuxOptions: {}
    # -- Set containers' Security Context runAsUser
    runAsUser: 1001
    # -- Set containers' Security Context runAsGroup
    runAsGroup: 1001
    # -- Set container's Security Context runAsNonRoot
    runAsNonRoot: true
    # -- Set container's Security Context privileged
    privileged: false
    # -- Set container's Security Context readOnlyRootFilesystem
    readOnlyRootFilesystem: true
    # -- Set container's Security Context allowPrivilegeEscalation
    allowPrivilegeEscalation: false
    capabilities:
      # -- List of capabilities to be dropped
      drop: ["ALL"]
    seccompProfile:
      # -- Set container's Security Context seccomp profile
      type: "RuntimeDefault"
  # Configure extra options for PostgreSQL Prometheus exporter containers' liveness, readiness and startup probes
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  livenessProbe:
    # -- Enable livenessProbe on PostgreSQL Prometheus exporter containers
    enabled: true
    # -- Initial delay seconds for livenessProbe
    initialDelaySeconds: 5
    # -- Period seconds for livenessProbe
    periodSeconds: 10
    # -- Timeout seconds for livenessProbe
    timeoutSeconds: 5
    # -- Failure threshold for livenessProbe
    failureThreshold: 6
    # -- Success threshold for livenessProbe
    successThreshold: 1
  readinessProbe:
    # -- Enable readinessProbe on PostgreSQL Prometheus exporter containers
    enabled: true
    # -- Initial delay seconds for readinessProbe
    initialDelaySeconds: 5
    # -- Period seconds for readinessProbe
    periodSeconds: 10
    # -- Timeout seconds for readinessProbe
    timeoutSeconds: 5
    # -- Failure threshold for readinessProbe
    failureThreshold: 6
    # -- Success threshold for readinessProbe
    successThreshold: 1
  startupProbe:
    # -- Enable startupProbe on PostgreSQL Prometheus exporter containers
    enabled: false
    # -- Initial delay seconds for startupProbe
    initialDelaySeconds: 10
    # -- Period seconds for startupProbe
    periodSeconds: 10
    # -- Timeout seconds for startupProbe
    timeoutSeconds: 1
    # -- Failure threshold for startupProbe
    failureThreshold: 15
    # -- Success threshold for startupProbe
    successThreshold: 1
  containerPorts:
    # -- PostgreSQL Prometheus exporter metrics container port
    metrics: 9187
  # PostgreSQL Prometheus exporter resource requests and limits
  # -- [object] Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
      ephemeral-storage: 50Mi
    limits:
      cpu: 150m
      memory: 192Mi
      ephemeral-storage: 1024Mi
  # -- [object] Annotations for Prometheus to auto-discover the metrics endpoint
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.metrics.containerPorts.metrics }}"
  # Service configuration
  service:
    ports:
      # -- PostgreSQL Prometheus Exporter service port
      metrics: 9187
    # -- Static clusterIP or None for headless services
    # ref: https://kubernetes.io/docs/concepts/services-networking/service/#choosing-your-own-ip-address
    clusterIP: ""
    # -- Control where client requests go, to the same pod or round-robin
    # Values: ClientIP or None
    # ref: https://kubernetes.io/docs/concepts/services-networking/service/
    sessionAffinity: None
# @section Network Policies
# Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy:
  # -- Specifies whether a NetworkPolicy should be created
  enabled: true
  # -- Don't require server label for connections
  # The Policy model to apply. When set to false, only pods with the correct
  # server label will have network access to the ports server is listening
  # on. When true, server will accept connections from any source
  # (with the correct destination port).
  allowExternal: true
  # -- [array] Add extra ingress rules to the NetworkPolicy
  # e.g:
  # extraIngress:
  #   - ports:
  #       - port: 1234
  #     from:
  #       - podSelector:
  #           - matchLabels:
  #               - role: frontend
  #       - podSelector:
  #           - matchExpressions:
  #               - key: role
  #                 operator: In
  #                 values:
  #                   - frontend
  extraIngress: []
  # -- [array] Add extra ingress rules to the NetworkPolicy
  # e.g:
  # extraEgress:
  #   - ports:
  #       - port: 1234
  #     to:
  #       - podSelector:
  #           - matchLabels:
  #               - role: frontend
  #       - podSelector:
  #           - matchExpressions:
  #               - key: role
  #                 operator: In
  #                 values:
  #                   - frontend
  extraEgress: []

# @section Backup parameters
# This section implements a trivial logical dump cronjob of the database.
# This only comes with the consistency guarantees of the dump program.
# This is not a snapshot based roll forward/backward recovery backup.
# ref: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
backup:
  # -- Enable the logical dump of the database "regularly"
  enabled: false
  cronjob:
    # -- Set the cronjob parameter schedule
    schedule: "@daily"
    # -- Set the cronjob parameter timeZone
    timeZone: ""
    # -- Set the cronjob parameter concurrencyPolicy
    concurrencyPolicy: Allow
    # -- Set the cronjob parameter failedJobsHistoryLimit
    failedJobsHistoryLimit: 1
    # -- Set the cronjob parameter successfulJobsHistoryLimit
    successfulJobsHistoryLimit: 3
    # -- Set the cronjob parameter startingDeadlineSeconds
    startingDeadlineSeconds: ""
    # -- Set the cronjob parameter ttlSecondsAfterFinished
    ttlSecondsAfterFinished: ""
    # -- Set the cronjob parameter restartPolicy
    restartPolicy: OnFailure
    podSecurityContext:
      # -- Enable PodSecurityContext for CronJob/Backup
      enabled: true
      # -- Set filesystem group change policy
      fsGroupChangePolicy: Always
      # -- Set kernel settings using the sysctl interface
      sysctls: []
      # -- Set filesystem extra groups
      supplementalGroups: []
      # -- Group ID for the CronJob
      fsGroup: 1001
    # backup container's Security Context
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    containerSecurityContext:
      # -- Enable containers' Security Context
      enabled: true
      # -- [object,nullable] Set SELinux options in container
      seLinuxOptions: {}
      # -- Set containers' Security Context runAsUser
      runAsUser: 1001
      # -- Set containers' Security Context runAsGroup
      runAsGroup: 1001
      # -- Set container's Security Context runAsNonRoot
      runAsNonRoot: true
      # -- Set container's Security Context privileged
      privileged: false
      # -- Set container's Security Context readOnlyRootFilesystem
      readOnlyRootFilesystem: true
      # -- Set container's Security Context allowPrivilegeEscalation
      allowPrivilegeEscalation: false
      capabilities:
        # -- List of capabilities to be dropped
        drop: ["ALL"]
      seccompProfile:
        # -- Set container's Security Context seccomp profile
        type: "RuntimeDefault"
    # -- Set backup container's command to run
    command:
      - /bin/sh
      - -c
      - "pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers --no-password --file=${PGDUMP_DIR}/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump"
    # -- Set the cronjob labels
    labels: {}
    # -- Set the cronjob annotations
    annotations: {}
    # -- Node labels for PostgreSQL backup CronJob pod assignment
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/
    nodeSelector: {}
    # -- [object] Set container requests and limits for different resources like CPU or memory
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
        ephemeral-storage: 50Mi
      limits:
        cpu: 150m
        memory: 192Mi
        ephemeral-storage: 1024Mi
    networkPolicy:
      # -- Specifies whether a NetworkPolicy should be created
      enabled: true
    storage:
      # -- Enable using a `PersistentVolumeClaim` as backup data volume
      enabled: true
      # -- Provide an existing `PersistentVolumeClaim`
      # If defined, PVC must be created manually before volume will be bound
      existingClaim: ""
      # -- Setting it to "keep" to avoid removing PVCs during a helm delete operation. Leaving it empty will delete PVCs after the chart deleted
      resourcePolicy: ""
      # -- PVC Storage Class for the backup data volume
      # If defined, storageClassName: <storageClass>
      # If set to "-", storageClassName: "", which disables dynamic provisioning
      # If undefined (the default) or set to null, no storageClassName spec is
      # set, choosing the default provisioner.
      storageClass: ""
      # -- PV Access Mode
      accessModes:
        - ReadWriteOnce
      # -- PVC Storage Request for the backup data volume
      size: 8Gi
      # -- PVC annotations
      annotations: {}
      # -- Path to mount the volume at
      mountPath: /backup/pgdump
      # -- Subdirectory of the volume to mount at
      # and one PV for multiple services.
      subPath: ""
    # -- Optionally specify extra list of additional volumeMounts for the backup container
    volumeMounts: []
    # -- Optionally specify extra list of additional volumes for the backup container
    volumes: []

# @skip
deployed: true
