# @section Global parameters
global:
  # -- Global Docker image registry
  imageRegistry: ""
  # -- Global Docker registry secret names as an array
  # e.g.
  # imagePullSecrets:
  #   - myRegistryKeySecretName
  imagePullSecrets: []
  # -- Global StorageClass for Persistent Volume(s)
  storageClass: ""
  redis:
    tls:
      # -- [boolean, nullable] Enable TLS traffic support (overrides `tls.enabled`)
      enabled: null
      # -- [boolean, nullable] Generate automatically self-signed TLS certificates (overrides `tls.autoGenerated`)
      autoGenerated: null
      # -- Name of an existing secret that contains the certificates (overrides `tls.existingSecret`)
      existingSecret: ""
      # -- Certificate value. Requires `tls.autoGenerated` to be `false` (overrides `tls.cert`)
      cert: ""
      # -- Certificate key value. Requires `tls.autoGenerated` to be `false` (overrides `tls.certKey`)
      certKey: ""
      # -- CA Certificate value. Requires `tls.autoGenerated` to be `false` (overrides `tls.certCA`)
      certCA: ""

# @section Common parameters
# -- String to partially override common.fullname template (will maintain the release name)
nameOverride: ""
# -- String to fully override common.fullname template
fullnameOverride: ""
# -- String to fully override common.namespace
namespaceOverride: ""
# -- Kubernetes Cluster Domain
clusterDomain: cluster.local
# -- Add labels to all the deployed resources
labels: {}
# -- Add annotations to all the deployed resources
annotations: {}
# -- Global Docker registry secret names as an array
# e.g.
# imagePullSecrets:
#   - myRegistryKeySecretName
imagePullSecrets: []

# @section Redis&reg; parameters
# Redis&reg; image
# ref: https://hub.docker.com/r/bitnami/redis/tags/
image:
  # -- [default: REGISTRY_NAME] Redis&reg; image registry
  registry: ""
  # -- [default: REPOSITORY_NAME/redis] Redis&reg; image repository
  repository: redis
  # @skip image.tag Redis&reg; image tag (immutable tags are recommended)
  tag: 8.0.2
  # -- Redis&reg; image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  digest: ""
  # -- Redis&reg; image pull policy
  # Specify a imagePullPolicy
  # Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  # ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  pullPolicy: IfNotPresent
# Authentication
auth:
  # -- Enable password authentication
  enabled: true
  # -- Redis&reg; username
  username: "default"
  # -- Redis&reg; password
  password: ""
  # -- The name of an existing secret with Redis&reg; credentials
  # Defaults to a random 10-character alphanumeric string if not set
  existingSecret: ""
  # -- Password key to be retrieved from existing secret
  existingSecretPasswordKey: ""
# TLS configuration
tls:
  # -- Enable TLS traffic
  enabled: false
  # -- Require clients to authenticate
  authClients: false
  # -- Enable autogenerated certificates
  autoGenerated: false
  # -- The name of the existing secret that contains the TLS certificates
  existingSecret: ""
  # -- Certificate filename
  certFilename: "tls.crt"
  # -- Certificate Key filename
  certKeyFilename: "tls.key"
  # -- CA Certificate filename
  certCAFilename: "ca.crt"
  # -- Certificate value. Requires `tls.autoGenerated` to be `false`
  cert: ""
  # -- Certificate key value. Requires `tls.autoGenerated` to be `false`
  certKey: ""
  # -- CA Certificate value. Requires `tls.autoGenerated` to be `false`
  certCA: ""
# Redis resource requests and limits
# ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# -- [object] Set container requests and limits for different resources like CPU or memory
resources:
  requests:
    cpu: 500m
    memory: 1024Mi
    ephemeral-storage: 50Mi
  limits:
    cpu: "1.0"
    memory: 1536Mi
    ephemeral-storage: 1024Mi
# @section Redis&reg; configuration parameters
# -- [string] Configuration to be added into the ConfigMap
# ref: https://redis.io/topics/config
configuration: ""
# -- The name of an existing ConfigMap with your custom configuration for Redis&reg; nodes
existingConfigmap: ""
# -- Number of Redis&reg; instances to deploy
replicaCount: 1
# -- Array with Redis&reg; commands to disable on master nodes
# Commands will be completely disabled by renaming each to an empty string.
# ref: https://redis.io/topics/security#disabling-of-specific-commands
disableCommands:
  - FLUSHDB
  - FLUSHALL
# -- Extra labels for Redis&reg; master pods
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}
# -- Annotations for Redis&reg; master pods
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# -- Affinity for Redis&reg; master pods assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
# NOTE: `podAffinityPreset`, `podAntiAffinityPreset`, and `nodeAffinityPreset` will be ignored when it's set
affinity: {}
# -- Node labels for Redis&reg; master pods assignment
# ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
nodeSelector: {}
# -- Tolerations for Redis&reg; master pods assignment
# ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []
# -- Seconds PostgreSQL pod needs to terminate gracefully
# ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
terminationGracePeriodSeconds: ""
# -- Array with extra environment variables to add to Redis&reg; master nodes
# e.g:
# extraEnvVars:
#   - name: FOO
#     value: "bar"
extraEnvVars: []
# -- Optionally specify extra list of additional volumes for the Redis&reg; master pod(s)
volumes: []
# -- Optionally specify extra list of additional volumeMounts for the Redis&reg; master container(s)
volumeMounts: []
containerPorts:
  # -- Container port to open on Redis&reg; master nodes
  redis: 6379
# Configure Pods Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
podSecurityContext:
  # -- Enabled Redis&reg; master pods' Security Context
  enabled: true
  # -- Set filesystem group change policy
  fsGroupChangePolicy: Always
  # -- Set kernel settings using the sysctl interface
  sysctls: []
  # -- Set filesystem extra groups
  supplementalGroups: []
  # -- Set Redis&reg; master pod's Security Context fsGroup
  fsGroup: 1001
# Configure Container Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
containerSecurityContext:
  # -- Enabled Redis&reg; master containers' Security Context
  enabled: true
  # -- [object,nullable] Set SELinux options in container
  seLinuxOptions: {}
  # -- Set Redis&reg; master containers' Security Context runAsUser
  runAsUser: 1001
  # -- Set Redis&reg; master containers' Security Context runAsGroup
  runAsGroup: 1001
  # -- Set Redis&reg; master containers' Security Context runAsNonRoot
  runAsNonRoot: true
  # -- Is it possible to escalate Redis&reg; pod(s) privileges
  allowPrivilegeEscalation: false
  # -- Set container's Security Context read-only root filesystem
  readOnlyRootFilesystem: true
  seccompProfile:
    # -- Set Redis&reg; master containers' Security Context seccompProfile
    type: RuntimeDefault
  capabilities:
    # -- Set Redis&reg; master containers' Security Context capabilities to drop
    drop: ["ALL"]
# Configure extra options for Redis&reg; containers' liveness and readiness probes
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
startupProbe:
  # -- Enable startupProbe on Redis&reg; master nodes
  enabled: false
  # -- Initial delay seconds for startupProbe
  initialDelaySeconds: 20
  # -- Period seconds for startupProbe
  periodSeconds: 5
  # -- Timeout seconds for startupProbe
  timeoutSeconds: 5
  # -- Failure threshold for startupProbe
  successThreshold: 1
  # -- Success threshold for startupProbe
  failureThreshold: 5
livenessProbe:
  # -- Enable livenessProbe on Redis&reg; master nodes
  enabled: true
  # -- Initial delay seconds for livenessProbe
  initialDelaySeconds: 20
  # -- Period seconds for livenessProbe
  periodSeconds: 5
  # -- Timeout seconds for livenessProbe
  timeoutSeconds: 5
  # -- Failure threshold for livenessProbe
  successThreshold: 1
  # -- Success threshold for livenessProbe
  failureThreshold: 5
readinessProbe:
  # -- Enable readinessProbe on Redis&reg; master nodes
  enabled: true
  # -- Initial delay seconds for readinessProbe
  initialDelaySeconds: 20
  # -- Period seconds for readinessProbe
  periodSeconds: 5
  # -- Timeout seconds for readinessProbe
  timeoutSeconds: 1
  # -- Failure threshold for readinessProbe
  successThreshold: 1
  # -- Success threshold for readinessProbe
  failureThreshold: 5
# @section Service Parameters
# Redis&reg; master service parameters
service:
  # -- Redis&reg; master service type
  type: ClusterIP
  portNames:
    # -- Redis&reg; master service port name
    redis: "tcp-redis"
  ports:
    # -- Redis&reg; master service port
    redis: 6379
  # -- Additional custom annotations for Redis&reg; master service
  annotations: {}
  # Headless service properties
  headless:
    # -- Annotations for the headless service.
    annotations: {}
# @section Persistence Parameters
# Enable persistence using Persistent Volume Claims
# ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
persistence:
  # -- Enable PostgreSQL data persistence using PVC
  enabled: true
  # -- Name of an existing PVC to use
  existingClaim: ""
  # -- PVC Storage Class for PostgreSQL data volume
  # If defined, storageClassName: <storageClass>
  # If set to "-", storageClassName: "", which disables dynamic provisioning
  # If undefined (the default) or set to null, no storageClassName spec is
  #   set, choosing the default provisioner.  (gp2 on AWS, standard on
  #   GKE, AWS & OpenStack)
  storageClass: ""
  # -- PVC Access Mode for PostgreSQL volume
  accessModes:
    - ReadWriteOnce
  # -- PVC Storage Request for PostgreSQL volume
  size: 8Gi
  # -- Annotations for the PVC
  annotations: {}
  # -- Labels for the PVC
  labels: {}
  # -- Selector to match an existing Persistent Volume (this value is evaluated as a template)
  # selector:
  #   matchLabels:
  #     app: my-app
  selector: {}
  # -- Custom PVC data source
  dataSource: {}
  # -- PostgreSQL Persistent Volume Claim Retention Policy
  # ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
  # Example:
  #   whenScaled: Retain
  #   whenDeleted: Retain
  persistentVolumeClaimRetentionPolicy: {}
# @section Other Parameters
# Service account
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # -- Specifies whether a ServiceAccount should be created
  create: true
  # -- The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the common.fullname template
  name: ""
  # -- Whether to auto mount the service account token
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server
  automount: false
  # -- Additional custom annotations for the ServiceAccount
  annotations: {}
# Network Policy configuration
# ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy:
  # -- Enable creation of NetworkPolicy resources
  enabled: true
  # -- Don't require client label for connections
  # When set to false, only pods with the correct client label will have network access to the ports
  # Redis&reg; is listening on. When true, Redis&reg; will accept connections from any source
  # (with the correct destination port).
  allowExternal: true
  # -- Allow the pod to access any range of port and all destinations.
  allowExternalEgress: true
  # -- Add extra ingress rules to the NetworkPolicy
  # e.g:
  # extraIngress:
  #   - ports:
  #       - port: 1234
  #     from:
  #       - podSelector:
  #           - matchLabels:
  #               - role: frontend
  #       - podSelector:
  #           - matchExpressions:
  #               - key: role
  #                 operator: In
  #                 values:
  #                   - frontend
  extraIngress: []
  # -- Add extra egress rules to the NetworkPolicy
  # e.g:
  # extraEgress:
  #   - ports:
  #       - port: 1234
  #     to:
  #       - podSelector:
  #           - matchLabels:
  #               - role: frontend
  #       - podSelector:
  #           - matchExpressions:
  #               - key: role
  #                 operator: In
  #                 values:
  #                   - frontend
  extraEgress: []

# @skip
deployed: true
