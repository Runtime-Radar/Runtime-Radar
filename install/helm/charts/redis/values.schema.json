{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                },
                "redis": {
                    "type": "object",
                    "properties": {
                        "tls": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": [
                                        "boolean",
                                        "null"
                                    ],
                                    "description": "Enable TLS traffic support (overrides `tls.enabled`)",
                                    "default": null,
                                    "nullable": true
                                },
                                "autoGenerated": {
                                    "type": [
                                        "boolean",
                                        "null"
                                    ],
                                    "description": "Generate automatically self-signed TLS certificates (overrides `tls.autoGenerated`)",
                                    "default": null,
                                    "nullable": true
                                },
                                "existingSecret": {
                                    "type": "string",
                                    "description": "Name of an existing secret that contains the certificates (overrides `tls.existingSecret`)",
                                    "default": ""
                                },
                                "cert": {
                                    "type": "string",
                                    "description": "Certificate value. Requires `tls.autoGenerated` to be `false` (overrides `tls.cert`)",
                                    "default": ""
                                },
                                "certKey": {
                                    "type": "string",
                                    "description": "Certificate key value. Requires `tls.autoGenerated` to be `false` (overrides `tls.certKey`)",
                                    "default": ""
                                },
                                "certCA": {
                                    "type": "string",
                                    "description": "CA Certificate value. Requires `tls.autoGenerated` to be `false` (overrides `tls.certCA`)",
                                    "default": ""
                                }
                            }
                        }
                    }
                }
            }
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.fullname template",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.namespace",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes Cluster Domain",
            "default": "cluster.local"
        },
        "labels": {
            "type": "object",
            "description": "Add labels to all the deployed resources",
            "default": {}
        },
        "annotations": {
            "type": "object",
            "description": "Add annotations to all the deployed resources",
            "default": {}
        },
        "imagePullSecrets": {
            "type": "array",
            "description": "Global Docker registry secret names as an array",
            "default": [],
            "items": {}
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Redis&reg; image registry",
                    "default": "REGISTRY_NAME"
                },
                "repository": {
                    "type": "string",
                    "description": "Redis&reg; image repository",
                    "default": "REPOSITORY_NAME/redis"
                },
                "digest": {
                    "type": "string",
                    "description": "Redis&reg; image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Redis&reg; image pull policy",
                    "default": "IfNotPresent"
                }
            }
        },
        "auth": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable password authentication",
                    "default": true
                },
                "username": {
                    "type": "string",
                    "description": "Redis&reg; username",
                    "default": "default"
                },
                "password": {
                    "type": "string",
                    "description": "Redis&reg; password",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "The name of an existing secret with Redis&reg; credentials",
                    "default": ""
                },
                "existingSecretPasswordKey": {
                    "type": "string",
                    "description": "Password key to be retrieved from existing secret",
                    "default": ""
                }
            }
        },
        "tls": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable TLS traffic",
                    "default": false
                },
                "authClients": {
                    "type": "boolean",
                    "description": "Require clients to authenticate",
                    "default": false
                },
                "autoGenerated": {
                    "type": "boolean",
                    "description": "Enable autogenerated certificates",
                    "default": false
                },
                "existingSecret": {
                    "type": "string",
                    "description": "The name of the existing secret that contains the TLS certificates",
                    "default": ""
                },
                "certFilename": {
                    "type": "string",
                    "description": "Certificate filename",
                    "default": "tls.crt"
                },
                "certKeyFilename": {
                    "type": "string",
                    "description": "Certificate Key filename",
                    "default": "tls.key"
                },
                "certCAFilename": {
                    "type": "string",
                    "description": "CA Certificate filename",
                    "default": "ca.crt"
                },
                "cert": {
                    "type": "string",
                    "description": "Certificate value. Requires `tls.autoGenerated` to be `false`",
                    "default": ""
                },
                "certKey": {
                    "type": "string",
                    "description": "Certificate key value. Requires `tls.autoGenerated` to be `false`",
                    "default": ""
                },
                "certCA": {
                    "type": "string",
                    "description": "CA Certificate value. Requires `tls.autoGenerated` to be `false`",
                    "default": ""
                }
            }
        },
        "configuration": {
            "type": "string",
            "description": "Configuration to be added into the ConfigMap",
            "default": "\"\""
        },
        "existingConfigmap": {
            "type": "string",
            "description": "The name of an existing ConfigMap with your custom configuration for Redis&reg; nodes",
            "default": ""
        },
        "replicaCount": {
            "type": "number",
            "description": "Number of Redis&reg; instances to deploy",
            "default": 1
        },
        "disableCommands": {
            "type": "array",
            "description": "Array with Redis&reg; commands to disable on master nodes",
            "default": [
                "FLUSHDB",
                "FLUSHALL"
            ],
            "items": {
                "type": "string"
            }
        },
        "podLabels": {
            "type": "object",
            "description": "Extra labels for Redis&reg; master pods",
            "default": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "Annotations for Redis&reg; master pods",
            "default": {}
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for Redis&reg; master pods assignment",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for Redis&reg; master pods assignment",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for Redis&reg; master pods assignment",
            "default": [],
            "items": {}
        },
        "terminationGracePeriodSeconds": {
            "type": "string",
            "description": "Seconds PostgreSQL pod needs to terminate gracefully",
            "default": ""
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Array with extra environment variables to add to Redis&reg; master nodes",
            "default": [],
            "items": {}
        },
        "volumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes for the Redis&reg; master pod(s)",
            "default": [],
            "items": {}
        },
        "volumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for the Redis&reg; master container(s)",
            "default": [],
            "items": {}
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "redis": {
                    "type": "number",
                    "description": "Container port to open on Redis&reg; master nodes",
                    "default": 6379
                }
            }
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled Redis&reg; master pods' Security Context",
                    "default": true
                },
                "fsGroupChangePolicy": {
                    "type": "string",
                    "description": "Set filesystem group change policy",
                    "default": "Always"
                },
                "sysctls": {
                    "type": "array",
                    "description": "Set kernel settings using the sysctl interface",
                    "default": [],
                    "items": {}
                },
                "supplementalGroups": {
                    "type": "array",
                    "description": "Set filesystem extra groups",
                    "default": [],
                    "items": {}
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Set Redis&reg; master pod's Security Context fsGroup",
                    "default": 1001
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled Redis&reg; master containers' Security Context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Set Redis&reg; master containers' Security Context runAsUser",
                    "default": 1001
                },
                "runAsGroup": {
                    "type": "number",
                    "description": "Set Redis&reg; master containers' Security Context runAsGroup",
                    "default": 1001
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set Redis&reg; master containers' Security Context runAsNonRoot",
                    "default": true
                },
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "Is it possible to escalate Redis&reg; pod(s) privileges",
                    "default": false
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "Set container's Security Context read-only root filesystem",
                    "default": true
                },
                "seccompProfile": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Set Redis&reg; master containers' Security Context seccompProfile",
                            "default": "RuntimeDefault"
                        }
                    }
                },
                "capabilities": {
                    "type": "object",
                    "properties": {
                        "drop": {
                            "type": "array",
                            "description": "Set Redis&reg; master containers' Security Context capabilities to drop",
                            "default": [
                                "ALL"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe on Redis&reg; master nodes",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 20
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 5
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 5
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 5
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe on Redis&reg; master nodes",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 20
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 5
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 5
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 5
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe on Redis&reg; master nodes",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 20
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 5
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 1
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 5
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Redis&reg; master service type",
                    "default": "ClusterIP"
                },
                "portNames": {
                    "type": "object",
                    "properties": {
                        "redis": {
                            "type": "string",
                            "description": "Redis&reg; master service port name",
                            "default": "tcp-redis"
                        }
                    }
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "redis": {
                            "type": "number",
                            "description": "Redis&reg; master service port",
                            "default": 6379
                        }
                    }
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for Redis&reg; master service",
                    "default": {}
                },
                "headless": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the headless service.",
                            "default": {}
                        }
                    }
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable PostgreSQL data persistence using PVC",
                    "default": true
                },
                "existingClaim": {
                    "type": "string",
                    "description": "Name of an existing PVC to use",
                    "default": ""
                },
                "storageClass": {
                    "type": "string",
                    "description": "PVC Storage Class for PostgreSQL data volume",
                    "default": ""
                },
                "accessModes": {
                    "type": "array",
                    "description": "PVC Access Mode for PostgreSQL volume",
                    "default": [
                        "ReadWriteOnce"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "PVC Storage Request for PostgreSQL volume",
                    "default": "8Gi"
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for the PVC",
                    "default": {}
                },
                "labels": {
                    "type": "object",
                    "description": "Labels for the PVC",
                    "default": {}
                },
                "selector": {
                    "type": "object",
                    "description": "Selector to match an existing Persistent Volume (this value is evaluated as a template)",
                    "default": {}
                },
                "dataSource": {
                    "type": "object",
                    "description": "Custom PVC data source",
                    "default": {}
                },
                "persistentVolumeClaimRetentionPolicy": {
                    "type": "object",
                    "description": "PostgreSQL Persistent Volume Claim Retention Policy",
                    "default": {}
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a ServiceAccount should be created",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ServiceAccount to use.",
                    "default": ""
                },
                "automount": {
                    "type": "boolean",
                    "description": "Whether to auto mount the service account token",
                    "default": false
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for the ServiceAccount",
                    "default": {}
                }
            }
        },
        "networkPolicy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable creation of NetworkPolicy resources",
                    "default": true
                },
                "allowExternal": {
                    "type": "boolean",
                    "description": "Don't require client label for connections",
                    "default": true
                },
                "allowExternalEgress": {
                    "type": "boolean",
                    "description": "Allow the pod to access any range of port and all destinations.",
                    "default": true
                },
                "extraIngress": {
                    "type": "array",
                    "description": "Add extra ingress rules to the NetworkPolicy",
                    "default": [],
                    "items": {}
                },
                "extraEgress": {
                    "type": "array",
                    "description": "Add extra egress rules to the NetworkPolicy",
                    "default": [],
                    "items": {}
                }
            }
        }
    }
}