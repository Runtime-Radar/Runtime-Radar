{{- $tlsEnabled := eq (include "common.tls.enabled" .) "true" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.fullname" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
  {{- with (include "common.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "common.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "common.fullname" . }}-headless
  template:
    metadata:
      {{- with (include "common.podAnnotations" .) }}
      annotations:
        {{- . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "common.podLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "common.serviceAccountName" . }}
      {{- include "common.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      containers:
        - name: redis
          image: {{ include "redis.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          command:
            - /bin/bash
            - -c
            - >-
              redis-server
              --include /etc/redis/redis.conf
            {{- if .Values.auth.enabled }}
            {{- if ne .Values.auth.username "default" }}
              --user default off
            {{- end }}
              --user "${REDIS_USER}" on "#$(echo -n "${REDIS_PASSWORD}" | sha256sum | cut -d' ' -f1)" "+@all" "~*"
            {{- else }}
              --protected-mode no
            {{- end }}
          env:
            {{- if .Values.auth.enabled }}
            - name: REDIS_USER
              value: {{ .Values.auth.username | quote }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.authSecretName" . }}
                  key: {{ include "redis.secretPasswordKey" . }}
            {{- end }}
            {{- with .Values.extraEnvVars }}
            {{- tpl (toYaml .) $ | nindent 12 }}
            {{- end }}
          ports:
            - name: redis
              containerPort: {{ .Values.containerPorts.redis }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe: {{- omit .Values.startupProbe "enabled" | toYaml | nindent 12 }}
            tcpSocket:
              port: redis
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe: {{- omit .Values.livenessProbe "enabled" | toYaml | nindent 12 }}
            exec:
              command:
                - sh
                - -c
                - >-
                  redis-cli
                  -h localhost
                  -p {{ .Values.containerPorts.redis }}
                {{- if .Values.auth.enabled }}
                  --user "${REDIS_USER}"
                  --pass "${REDIS_PASSWORD}"
                {{- end }}
                {{- if $tlsEnabled }}
                  --tls
                  --cacert {{ include "redis.tlsCACert" . }}
                  {{- if .Values.tls.authClients }}
                  --cert {{ include "redis.tlsCert" . }}
                  --key {{ include "redis.tlsCertKey" . }}
                  {{- end }}
                {{- end }}
                  ping | head -n1 | ( ! grep -vP '^\s*(PONG|LOADING|MASTERDOWN)' )
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe: {{- omit .Values.readinessProbe "enabled" | toYaml | nindent 12 }}
            exec:
              command:
                - sh
                - -c
                - >-
                  redis-cli
                  -h localhost
                  -p {{ .Values.containerPorts.redis }}
                {{- if .Values.auth.enabled }}
                  --user "${REDIS_USER}"
                  --pass "${REDIS_PASSWORD}"
                {{- end }}
                {{- if $tlsEnabled }}
                  --tls
                  --cacert {{ include "redis.tlsCACert" . }}
                  {{- if .Values.tls.authClients }}
                  --cert {{ include "redis.tlsCert" . }}
                  --key {{ include "redis.tlsCertKey" . }}
                  {{- end }}
                {{- end }}
                  ping | head -n1 | ( ! grep -vP '^\s*(PONG)' )
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /etc/redis/redis.conf
              subPath: redis.conf
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            {{- if $tlsEnabled }}
            - name: redis-certificates
              mountPath: /etc/redis/certs
              readOnly: true
            {{- end }}
            {{- with .Values.volumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "common.configmapName" . }}
        - name: empty-dir
          emptyDir: {}
        {{- if $tlsEnabled }}
        - name: redis-certificates
          secret:
            secretName: {{ include "common.tls.secretName" . }}
            defaultMode: 256
        {{- end }}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
  {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else if .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ tpl .Values.persistence.existingClaim . }}
  {{- else }}
  {{- with .Values.persistence.persistentVolumeClaimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy:
    {{ toYaml . | nindent 4 }}
  {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        {{- with (include "common.mergeAnnotations" (dict "context" . "value" .Values.persistence.annotations)) }}
        annotations:
          {{- . | nindent 10 }}
        {{- end }}
        {{- with (include "common.mergeLabels" (dict "context" . "value" .Values.persistence.labels)) }}
        labels:
          {{- . | nindent 10 }}
        {{- end }}
      spec:
        accessModes: {{- toYaml .Values.persistence.accessModes | nindent 10 }}
        {{- with .Values.persistence.dataSource }}
        dataSource: {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- with .Values.persistence.selector }}
        selector: {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with (default .Values.persistence.storageClass (.Values.global).storageClass) }}
        storageClassName: {{ eq . "-" | ternary "" . | quote }}
        {{- end }}
  {{- end }}
