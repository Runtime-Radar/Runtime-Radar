# @section Global parameters
global:
  # -- Global Docker image registry
  imageRegistry: ""
  # -- Global Docker registry secret names as an array
  # e.g.
  # imagePullSecrets:
  #   - myRegistryKeySecretName
  imagePullSecrets: []
  # -- Global StorageClass for Persistent Volume(s)
  storageClass: ""

  clickhouse:
    tls:
      # -- [boolean, nullable] Enable TLS traffic support (overrides `tls.enabled`)
      enabled: null
      # -- [boolean, nullable] Generate automatically self-signed TLS certificates (overrides `tls.autoGenerated`)
      autoGenerated: null
      # -- Name of an existing secret that contains the certificates (overrides `tls.existingSecret`)
      existingSecret: ""
      # -- Certificate value. Requires `tls.autoGenerated` to be `false` (overrides `tls.cert`)
      cert: ""
      # -- Certificate key value. Requires `tls.autoGenerated` to be `false` (overrides `tls.certKey`)
      certKey: ""
      # -- CA Certificate value. Requires `tls.autoGenerated` to be `false` (overrides `tls.certCA`)
      certCA: ""

# @section Common parameters
# -- String to partially override common.fullname template (will maintain the release name)
nameOverride: ""
# -- String to fully override common.fullname template
fullnameOverride: ""
# -- String to fully override common.namespace
namespaceOverride: ""
# -- Kubernetes Cluster Domain
clusterDomain: cluster.local
# -- Add labels to all the deployed resources
labels: {}
# -- Add annotations to all the deployed resources
annotations: {}
# -- Global Docker registry secret names as an array
# e.g.
# imagePullSecrets:
#   - myRegistryKeySecretName
imagePullSecrets: []

# @section ClickHouse parameters
# ClickHouse image
# ref: https://hub.docker.com/r/clickhouse/clickhouse-server/tags/
image:
  # -- [default: REGISTRY_NAME] ClickHouse image registry
  registry: ""
  # -- [default: REPOSITORY_NAME/clickhouse] ClickHouse image repository
  repository: clickhouse/clickhouse-server
  # @skip image.tag ClickHouse image tag (immutable tags are recommended)
  tag: "25.9.4"
  # -- ClickHouse image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  digest: ""
  # -- ClickHouse image pull policy
  # Specify a imagePullPolicy
  # Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  # ref: http://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  pullPolicy: IfNotPresent
# Authentication
auth:
  # -- ClickHouse Admin username
  username: default
  # -- ClickHouse Admin password
  password: ""
  # -- Name for a custom database to create
  database: ""
  # -- Name of a secret containing the Admin password
  existingSecret: ""
  # -- Name of the key inside the existing secret
  existingSecretPasswordKey: ""
# TLS configuration
tls:
  # -- Enable TLS traffic support
  enabled: false
  # -- Generate automatically self-signed TLS certificates
  autoGenerated: false
  # -- Name of an existing secret that contains the certificates
  existingSecret: ""
  # -- Certificate filename
  certFilename: "tls.crt"
  # -- Certificate key filename
  certKeyFilename: "tls.key"
  # -- CA Certificate filename
  certCAFilename: "ca.crt"
  # -- Certificate value. Requires `tls.autoGenerated` to be `false`
  cert: ""
  # -- Certificate key value. Requires `tls.autoGenerated` to be `false`
  certKey: ""
  # -- CA Certificate value. Requires `tls.autoGenerated` to be `false`
  certCA: ""
# ClickHouse resource requests and limits
# ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# -- [object] Set container requests and limits for different resources like CPU or memory
resources:
  requests:
    cpu: "1.0"
    memory: 2048Mi
    ephemeral-storage: 50Mi
  limits:
    cpu: "2.0"
    memory: 3072Mi
    ephemeral-storage: 1024Mi
# -- Number of ClickHouse replicas to deploy
# if keeper enable, same as keeper count, keeper cluster by shards.
replicaCount: 1
# -- Logging level
logLevel: information
# @section ClickHouse keeper configuration parameters
keeper:
  # -- Deploy ClickHouse keeper. Support is experimental.
  enabled: false
# -- Configuration overrides (evaluated as a template)
configuration: ""
# -- The name of an existing ConfigMap with your custom configuration for ClickHouse
existingConfigmap: ""
# -- Extra labels for ClickHouse pods
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}
# -- Annotations for ClickHouse pods
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# -- Affinity for ClickHouse pods assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
# NOTE: `podAffinityPreset`, `podAntiAffinityPreset`, and `nodeAffinityPreset` will be ignored when it's set
affinity: {}
# -- Node labels for ClickHouse pods assignment
# ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
nodeSelector: {}
# -- Tolerations for ClickHouse pods assignment
# ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []
# -- Seconds Redmine pod needs to terminate gracefully
# ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
terminationGracePeriodSeconds: ""
# -- Array with extra environment variables to add to ClickHouse nodes
# e.g:
# extraEnvVars:
#   - name: FOO
#     value: "bar"
extraEnvVars: []
# -- Optionally specify extra list of additional volumes for the ClickHouse pod(s)
volumes: []
# -- Optionally specify extra list of additional volumeMounts for the ClickHouse container(s)
volumeMounts: []
containerPorts:
  # -- ClickHouse HTTP container port
  http: 8123
  # -- ClickHouse HTTPS container port
  https: 8443
  # -- ClickHouse TCP container port
  tcp: 9000
  # -- ClickHouse TCP (secure) container port
  tcpSecure: 9440
  # -- ClickHouse keeper TCP container port
  keeper: 2181
  # -- ClickHouse keeper TCP (secure) container port
  keeperSecure: 3181
  # -- ClickHouse keeper interserver TCP container port
  keeperInter: 9444
  # -- ClickHouse MySQL container port
  mysql: 9004
  # -- ClickHouse PostgreSQL container port
  postgresql: 9005
  # -- ClickHouse Interserver container port
  interserver: 9009
  # -- ClickHouse metrics container port
  metrics: 8001
# Configure Pods Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
podSecurityContext:
  # -- Enabled ClickHouse pods' Security Context
  enabled: true
  # -- Set filesystem group change policy
  fsGroupChangePolicy: Always
  # -- Set kernel settings using the sysctl interface
  sysctls: []
  # -- Set filesystem extra groups
  supplementalGroups: []
  # -- Set ClickHouse pod's Security Context fsGroup
  fsGroup: 1001
# Configure Container Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
containerSecurityContext:
  # -- Enable containers' Security Context
  enabled: true
  # -- [object,nullable] Set SELinux options in container
  seLinuxOptions: {}
  # -- Set containers' Security Context runAsUser
  runAsUser: 1001
  # -- Set containers' Security Context runAsGroup
  runAsGroup: 1001
  # -- Set containers' Security Context runAsNonRoot
  runAsNonRoot: true
  # -- Set read only root file system pod's
  privileged: false
  # -- Set contraller container's Security Context privileged
  allowPrivilegeEscalation: false
  # -- Set contraller container's Security Context allowPrivilegeEscalation
  readOnlyRootFilesystem: true
  capabilities:
    # -- List of capabilities to be droppedn
    drop: ["ALL"]
  seccompProfile:
    # -- Set container's Security Context seccomp profile
    type: "RuntimeDefault"
# Configure extra options for ClickHouse containers' liveness and readiness probes
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
livenessProbe:
  # -- Enable livenessProbe on ClickHouse containers
  enabled: true
  # -- Failure threshold for livenessProbe
  failureThreshold: 3
  # -- Initial delay seconds for livenessProbe
  initialDelaySeconds: 10
  # -- Period seconds for livenessProbe
  periodSeconds: 10
  # -- Success threshold for livenessProbe
  successThreshold: 1
  # -- Timeout seconds for livenessProbe
  timeoutSeconds: 1
readinessProbe:
  # -- Enable readinessProbe on ClickHouse containers
  enabled: true
  # -- Failure threshold for readinessProbe
  failureThreshold: 3
  # -- Initial delay seconds for readinessProbe
  initialDelaySeconds: 10
  # -- Period seconds for readinessProbe
  periodSeconds: 10
  # -- Success threshold for readinessProbe
  successThreshold: 1
  # -- Timeout seconds for readinessProbe
  timeoutSeconds: 1
startupProbe:
  # -- Enable startupProbe on ClickHouse containers
  enabled: false
  # -- Failure threshold for startupProbe
  failureThreshold: 3
  # -- Initial delay seconds for startupProbe
  initialDelaySeconds: 10
  # -- Period seconds for startupProbe
  periodSeconds: 10
  # -- Success threshold for startupProbe
  successThreshold: 1
  # -- Timeout seconds for startupProbe
  timeoutSeconds: 1
# @section Service Parameters
# ClickHouse service parameters
service:
  # -- ClickHouse service type
  type: ClusterIP
  ports:
    # -- ClickHouse service HTTP port
    http: 8123
    # -- ClickHouse service HTTPS port
    https: 443
    # -- ClickHouse service TCP port
    tcp: 9000
    # -- ClickHouse service TCP (secure) port
    tcpSecure: 9440
    # -- ClickHouse keeper TCP container port
    keeper: 2181
    # -- ClickHouse keeper TCP (secure) container port
    keeperSecure: 3181
    # -- ClickHouse keeper interserver TCP container port
    keeperInter: 9444
    # -- ClickHouse service MySQL port
    mysql: 9004
    # -- ClickHouse service PostgreSQL port
    postgresql: 9005
    # -- ClickHouse service Interserver port
    interserver: 9009
    # -- ClickHouse service metrics port
    metrics: 8001
  # -- Additional custom annotations for ClickHouse service
  annotations: {}
  # Headless service properties
  headless:
    # -- Annotations for the headless service.
    annotations: {}
# @section Persistence Parameters
# Enable persistence using Persistent Volume Claims
# ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
persistence:
  # -- Enable persistence using Persistent Volume Claims
  enabled: true
  # -- Name of an existing PVC to use
  existingClaim: ""
  # -- Storage class of backing PVC
  # If defined, storageClassName: <storageClass>
  # If set to "-", storageClassName: "", which disables dynamic provisioning
  # If undefined (the default) or set to null, no storageClassName spec is
  #   set, choosing the default provisioner.  (gp2 on AWS, standard on
  #   GKE, AWS & OpenStack)
  storageClass: ""
  # -- Persistent Volume Claim labels
  labels: {}
  # -- Persistent Volume Claim annotations
  annotations: {}
  # -- Persistent Volume Access Modes
  accessModes:
    - ReadWriteOnce
  # -- Size of data volume
  size: 8Gi
  # -- Selector to match an existing Persistent Volume for ClickHouse data PVC
  # If set, the PVC can't have a PV dynamically provisioned for it
  # E.g.
  # selector:
  #   matchLabels:
  #     app: my-app
  selector: {}
  # -- Custom PVC data source
  dataSource: {}
  # -- PostgreSQL Persistent Volume Claim Retention Policy
  # ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
  # Example:
  #   whenScaled: Retain
  #   whenDeleted: Retain
  persistentVolumeClaimRetentionPolicy: {}
# @section Other Parameters
# ServiceAccount configuration
serviceAccount:
  # -- Specifies whether a ServiceAccount should be created
  create: true
  # -- The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the common.fullname template
  name: ""
  # -- Additional Service Account annotations (evaluated as a template)
  annotations: {}
  # -- Automount service account token for the server service account
  automount: false
# Prometheus metrics
metrics:
  # -- Enable the export of Prometheus metrics
  enabled: false
  # -- ClickHouse metrics external host
  externalHost: ""
  # -- [object] Annotations for metrics scraping
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.containerPorts.metrics }}"
    prometheus.io/path: "/metrics"
# @section Network Policies
# Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy:
  # -- Specifies whether a NetworkPolicy should be created
  enabled: true
  # -- Don't require server label for connections
  # The Policy model to apply. When set to false, only pods with the correct
  # server label will have network access to the ports server is listening
  # on. When true, server will accept connections from any source
  # (with the correct destination port).
  allowExternal: true
  # -- [array] Add extra ingress rules to the NetworkPolicy
  # e.g:
  # extraIngress:
  #   - ports:
  #       - port: 1234
  #     from:
  #       - podSelector:
  #           - matchLabels:
  #               - role: frontend
  #       - podSelector:
  #           - matchExpressions:
  #               - key: role
  #                 operator: In
  #                 values:
  #                   - frontend
  extraIngress: []
  # -- [array] Add extra ingress rules to the NetworkPolicy
  # e.g:
  # extraEgress:
  #   - ports:
  #       - port: 1234
  #     to:
  #       - podSelector:
  #           - matchLabels:
  #               - role: frontend
  #       - podSelector:
  #           - matchExpressions:
  #               - key: role
  #                 operator: In
  #                 values:
  #                   - frontend
  extraEgress: []

# @skip
deployed: true
