# @section Global parameters
global:
  # -- Global Docker image registry
  imageRegistry: ""
  # -- Global Docker image tag to use for RR components
  imageTag: ""
  # -- Logging level for components
  logLevel: INFO

  tls:
    # -- Name of the existing secret with TLS certificates
    existingSecret: ""

  keys:
    # -- Existing secret name with keys `encryption` and `token`
    existingSecret: ""
    # -- Encryption key for secrets stored in database. Must be a 64-character hexadecimal string (32 bytes)
    # Generate with: openssl rand -hex 32
    # e.g.
    # b6956dd282d099a57315e2525c68bc5858012b6cdc7d6cce6b34b6656edc39e6
    encryption: ""
    # -- Encryption key for authentication tokens. Must be a 64-character hexadecimal string (32 bytes)
    # Generate with: openssl rand -hex 32
    # e.g.
    # 371476537718520eaedcafb1d0e2dff161715252d5e4fce9cdd7b4a8fbedd451
    token: ""
    # -- Salt for public API tokens. Must be a 128-character hexadecimal string (64 bytes)
    # Generate with: openssl rand -hex 64
    # e.g.
    # 8848503f12a2cc1d1917045d0644680b63aa40616e4d51f1aca8143305a7f64197e28b051d691eb2b8a652f40ac0fae030056f56040fecec1f4b6c1429555068
    publicAccessTokenSalt: ""

  postgresql:
    tls:
      # -- [boolean, nullable] Enable TLS traffic support (overrides `tls.enabled`)
      enabled: true
      # -- [boolean, nullable] Verify TLS connection to the service (overrides `tls.verify`)
      verify: true
      # -- Name of an existing secret that contains the certificates (overrides `tls.existingSecret`)
      existingSecret: ""

  redis:
    tls:
      # -- [boolean, nullable] Enable TLS traffic support (overrides `tls.enabled`)
      enabled: true
      # -- [boolean, nullable] Verify TLS connection to the service (overrides `tls.verify`)
      verify: true
      # -- Name of an existing secret that contains the certificates (overrides `tls.existingSecret`)
      existingSecret: ""

  clickhouse:
    tls:
      # -- [boolean, nullable] Enable TLS traffic support (overrides `tls.enabled`)
      enabled: true
      # -- [boolean, nullable] Verify TLS connection to the service (overrides `tls.verify`)
      verify: true
      # -- Name of an existing secret that contains the certificates (overrides `tls.existingSecret`)
      existingSecret: ""

  grafana:
    tls:
      # -- [boolean, nullable] Enable TLS traffic support (overrides `tls.enabled`)
      enabled: true
      # -- [boolean, nullable] Verify TLS connection to the service (overrides `tls.verify`)
      verify: true
      # -- Name of an existing secret that contains the certificates (overrides `tls.existingSecret`)
      existingSecret: ""

  # -- Names of the secrets of the global container registry as an array
  imagePullSecrets:
    - regcred

  # -- URL of primary installation
  ownCsUrl: ""
  # -- URL of primary installation
  centralCsUrl: ""
  # -- Is this a child cluster
  isChildCluster: false
  # @skip global.csVersion
  csVersion: "0.1"

# @section Common RR parameters
# -- String to fully override common.fullname
fullnameOverride: "runtime-radar"

imagePullSecret:
  # -- Name of the secret with container registry credentials
  name: regcred
  # -- Container registry username
  username: ""
  # -- Container registry password
  password: ""

serviceAccount:
  # -- Create a service account
  create: true
  # -- Service account name
  name: runtime-radar

tls:
  # -- [boolean, nullable] Generate automatically self-signed TLS certificates if nothing is provided
  autoGenerated: true
  # -- Verify connection to external cluster
  verify: false
  # -- TLS certificate
  cert: ""
  # -- TLS certificate key
  certKey: ""
  # -- TLS certificate CA
  certCA: ""

# @section Auth-center component parameters
auth-center:
  # -- Template to specify the labels of nodes for pod assignment
  nodeSelector: {}
  # -- Number of replicas for the auth-center component
  replicas: 2
  administrator:
    # -- Name of the existing secret with administrator credentials
    existingSecret: ""
    # -- Administrator name
    username: ""
    # -- Administrator password
    password: ""

# @section Policy-enforcer component parameters
policy-enforcer:
  # -- Template to specify the labels of nodes for pod assignment
  nodeSelector: {}
  # -- Number of replicas for the policy-enforcer component
  replicas: 2

# @section History-api component parameters
history-api:
  # -- Template to specify the labels of nodes for pod assignment
  nodeSelector: {}
  # -- Number of replicas for the history-api component
  replicas: 2
  # -- Interval to retain history data for
  # e.g.
  # 1m - 1 minute
  # 1h - 1 hour
  retentionInterval: "8760h"
  # Rabbitmq connection configuration
  rabbitmq:
    # -- RabbitMQ queue name
    queue: history_events

# @section Container-registry-integrator component parameters
cluster-manager:
  # -- Template to specify the labels of nodes for pod assignment
  nodeSelector: {}
  # -- Number of replicas for the cluster-manager component
  replicas: 2

# @section Notifier component parameters
notifier:
  # -- Template to specify the labels of nodes for pod assignment
  nodeSelector: {}
  # -- Number of replicas for the notifier component
  replicas: 2

# @section Reverse-proxy component parameters
reverse-proxy:
  # -- Template to specify the labels of nodes for pod assignment
  nodeSelector: {}
  # -- Number of replicas for the reverse-proxy component
  replicas: 2
  # Ingress configuration of RR
  ingress:
    # -- Enable ingress for RR
    enabled: false
    # -- Ingress class
    class: ""
    # -- Hostname of ingress
    hostname: ""
    # Ingress TLS parameters
    tls:
      # -- [boolean, nullable] Generate automatically self-signed TLS certificates if nothing is provided
      autoGenerated: true
      # -- Name of an existing secret that contains the certificates
      existingSecret: ""
      # -- Certificate value
      cert: ""
      # -- Certificate key value
      certKey: ""
      # -- CA Certificate value
      certCA: ""
  # Service configuration of RR
  service:
    # -- [default: ClusterIP] Type of reverse-proxy service
    # NodePort can be used to expose RR outside without ingress
    type: ClusterIP
    # -- Node ports which should be exposed outside
    # e.g.
    # nodePorts:
    #   http: 32320
    nodePorts: {}


# @section CS-manager component parameters
cs-manager:
  # -- Template to specify the labels of nodes for pod assignment
  nodeSelector: {}
  # -- Number of replicas for the cs-manager component
  replicas: 1
  # -- Token for cluster registration
  registrationToken: ""

# @section Runtime-monitor component parameters
runtime-monitor:
  # -- Template to specify the labels of nodes for pod assignment
  nodeSelector: {}
  # -- Interval to update the stored configuration
  configUpdateInterval: 30s
  # -- Configuration of the DNS policy for runtime monitoring
  dnsPolicy: ClusterFirstWithHostNet
  # Please note that runtime-monitor service runs in hostNetwork mode and may have conflicts with host ports.
  # You can change the conflicting ports here
  containerPorts:
    # -- Port that HTTP server should be listening on
    http: 9000
    # -- Port that GRPC server should be listening on
    grpc: 8000
    # -- Port that gops agent should be listening on
    gops: 7000
  # Tetragon parameters
  tetragon:
    # -- Enable visibility of capabilities in the exec and kprobe events
    enableProcessCred: true
    # -- Enable visibility of namespaces in the exec and kprobe events
    enableProcessNs: true
    # -- Allowlist for JSON export
    # e.g.
    # To export only process_connect events from the default namespace:
    # exportAllowList: |
    #   {"namespace":["default"],"event_set":["PROCESS_EXEC"]}
    exportAllowList: |
      {"pod_regex":["deathstar"],"event_set":["PROCESS_EXEC", "PROCESS_EXIT", "PROCESS_KPROBE", "PROCESS_UPROBE", "PROCESS_TRACEPOINT"]}
    grpc:
      # -- Set address of Tetragon grpc connection in host:port format
      address: "localhost:54321"
    # -- [object] Resource configuration for tetragon container
    resources:
      limits:
        cpu: "2"
        ephemeral-storage: 1000Mi
        memory: 2Gi
      requests:
        cpu: 100m
        ephemeral-storage: 1Mi
        memory: 128Mi
  # Rabbitmq connection configuration
  rabbitmq:
    # -- RabbitMQ queue name
    queue: runtime_events
  # -- [object] Resource configuration for runtime-monitor container
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 1000Mi
      memory: 2Gi
    requests:
      cpu: 100m
      ephemeral-storage: 1Mi
      memory: 128Mi

# @section Event-processor component parameters
event-processor:
  # -- Template to specify the labels of nodes for pod assignment
  nodeSelector: {}
  # -- Number of replicas for the component
  replicas: 2
  # -- Interval to update the stored configuration
  configUpdateInterval: 30s
  # RabbitMQ connection parameters
  rabbitmq:
    # -- RabbitMQ runtime events queue name
    runtimeEventsQueue: runtime_events
    # -- RabbitMQ history events queue name
    historyEventsQueue: history_events
  # -- [object] Resource configuration for event-processor container
  resources:
    limits:
      cpu: 2
      ephemeral-storage: 1000Mi
      memory: 2Gi
    requests:
      cpu: 100m
      ephemeral-storage: 1Mi
      memory: 128Mi

# @section Public-api component parameters
public-api:
  # -- Template to specify the labels of nodes for pod assignment
  nodeSelector: {}
  # -- Number of replicas for the public-api component
  replicas: 2

# @section Postgresql installation configuration
postgresql:
  # -- External host with PostgreSQL. Requires setting `postgresql.deploy` to `false`.
  externalHost: ""
  # -- String to fully override common.names.fullname template
  fullnameOverride: postgresql
  # PostgreSQL TLS parameters
  tls:
    # -- [boolean, nullable] Generate automatically self-signed TLS certificates if nothing is provided
    autoGenerated: true
    # -- Certificate value
    cert: ""
    # -- Certificate key value
    certKey: ""
    # -- CA Certificate value
    certCA: ""
  # PostgreSQL authentication parameters
  auth:
    # -- Name of the existing secret with PostgreSQL credentials. The `auth.postgresPassword`, `auth.password`, and `auth.replicationPassword` values will be ignored and taken from this secret. The secret might also contain the `ldap-password` key if LDAP is enabled. If so, the `ldap.bind_password` value will be ignored and taken from this secret.
    existingSecret: postgresql
    # -- Name of custom user to be created
    username: runtime-radar
    # -- Password of custom user to be created. Ignored if `auth.existingSecret` is set.
    password: ""
    # -- Name of custom database to be created
    database: runtime-radar
    # -- Name of the key in the existing secret with PostgreSQL credentials. Only used if `auth.existingSecret` is set.
    existingSecretPasswordKey: POSTGRES_PASSWORD
  # -- Labels of nodes for primary PostgreSQL pod assignment
  nodeSelector: {}
  # -- [object] Resource configuration for PostgreSQL container
  resources:
    requests:
      cpu: 500m
      memory: 1024Mi
      ephemeral-storage: 50Mi
    limits:
      cpu: 1.0
      memory: 1536Mi
      ephemeral-storage: 1024Mi
  # PostgreSQL Primary persistence configuration
  persistence:
    # -- Enable data persistence for primary PostgreSQL using PVC
    enabled: true
    # -- Persistent volume storage class for primary PostgreSQL
    # If defined, storageClassName: <storageClass>
    # If set to "-", storageClassName: "", which disables dynamic provisioning
    # If undefined (the default) or set to null, no storageClassName spec is
    #   set, choosing the default provisioner.  (gp2 on AWS, standard on
    #   GKE, AWS & OpenStack)
    storageClass: ""
    # -- Persistent volume size for PostgreSQL
    size: 1Gi
    # -- Name of an existing PVC
    existingClaim: ""
    # -- Template to specify an existing persistent volume
    # selector:
    #   matchLabels:
    #     app: my-app
    selector: {}
  # PostgreSQL metrics
  metrics:
    # -- Start a prometheus exporter
    enabled: false
    # -- PostgreSQL metrics external host
    externalHost: ""

# @section Redis installation configuration
redis:
  # -- External host with Redis. Requires setting `redis.deploy` to `false`.
  externalHost: ""
  # -- String to fully override common.names.fullname
  fullnameOverride: redis
  # Redis TLS parameters
  tls:
    # -- [boolean, nullable] Generate automatically self-signed TLS certificates if nothing is provided
    autoGenerated: true
    # -- Certificate value
    cert: ""
    # -- Certificate key value
    certKey: ""
    # -- CA Certificate value
    certCA: ""
  # Redis authentication parameters
  auth:
    # -- Name of the existing secret with Redis credentials
    # NOTE: When it's set, the previous `auth.password` parameter is ignored
    existingSecret: redis
    # -- Redis username
    username: runtime-radar
    # -- Redis password
    # Defaults to a random 10-character alphanumeric string if not set
    password: ""
    # -- Password key to retrieve from the existing secret
    # NOTE: ignored unless the `auth.existingSecret` parameter is set
    existingSecretPasswordKey: REDIS_PASSWORD
  # -- Number of Redis master instances to deploy (experimental, requires additional configuring)
  replicaCount: 1
  # -- Labels of nodes for Redis master pod assignment
  nodeSelector: {}
  # -- [object] Resource configuration for Redis container
  resources:
    requests:
      cpu: 500m
      memory: 1024Mi
      ephemeral-storage: 50Mi
    limits:
      cpu: "1.0"
      memory: 1536Mi
      ephemeral-storage: 1024Mi
  # Redis master persistence parameters
  persistence:
    # -- Enable persistence for Redis master nodes using PVC
    enabled: false
    # -- Persistent volume storage class
    # If defined, storageClassName: <storageClass>
    # If set to "-", storageClassName: "", which disables dynamic provisioning
    # If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
    storageClass: ""
    # -- Persistent volume size
    size: 1Gi
    # -- Use an existing PVC created manually
    # NOTE: requires master.persistence.enabled: true
    existingClaim: ""
    # -- Template to specify additional labels for PVC
    # e.g:
    # selector:
    #   matchLabels:
    #     app: my-app
    selector: {}

# @section RabbitMQ installation configuration
rabbitmq:
  # -- External host with RabbitMQ
  externalHost: ""
  # -- String to fully override rabbitmq.fullname template
  fullnameOverride: rabbitmq
  # RabbitMQ authentication parameters
  auth:
    # -- RabbitMQ application username
    username: runtime-radar
    # -- RabbitMQ application password
    password: ""
    # -- Existing secret with RabbitMQ credentials (must contain value for the `rabbitmq-password` parameter)
    existingSecret: rabbitmq
    # -- Password key to be retrieved from existing secret
    existingSecretPasswordKey: RABBIT_PASSWORD
  # -- Template to specify the labels of nodes for pod assignment
  nodeSelector: {}
  # -- [object] Resource configuration for RabbitMQ container
  resources:
    requests:
      cpu: "1.0"
      memory: 2048Mi
      ephemeral-storage: 50Mi
    limits:
      cpu: "2.0"
      memory: 3072Mi
      ephemeral-storage: 1024Mi
  # RabbitMQ persistence parameters
  persistence:
    # -- Enable RabbitMQ data persistence using PVC
    enabled: true
    # -- Persistent volume storage class for RabbitMQ
    # If defined, storageClassName: <storageClass>
    # If set to "-", storageClassName: "", which disables dynamic provisioning
    # If undefined (the default) or set to null, no storageClassName spec is
    #   set, choosing the default provisioner.  (gp2 on AWS, standard on
    #   GKE, AWS & OpenStack)
    storageClass: ""
    # -- Persistent volume size for RabbitMQ
    # If you change this value, you might have to adjust `rabbitmq.diskFreeLimit` as well
    size: 1Gi
    # -- Name of an existing PVC
    # The value is evaluated as a template
    # So, for example, the name can depend on .Release or .Chart
    existingClaim: ""
    # -- Template to specify an existing persistent volume
    # selector:
    #   matchLabels:
    #     app: my-app
    selector: {}
  # RabbitMQ metrics
  metrics:
    # -- Enable exposing RabbitMQ metrics to be gathered by Prometheus
    enabled: false
    # -- RabbitMQ metrics external host
    externalHost: ""

# @section Clickhouse installation configuration
clickhouse:
  # -- External host with ClickHouse. Requires setting `clickhouse.deploy` to `false`.
  externalHost: ""
  # -- String to fully override common.names.fullname
  fullnameOverride: clickhouse
  # -- Labels of nodes for ClickHouse pod assignment
  nodeSelector: {}
  # -- Number of ClickHouse replicas to deploy per shard
  # if keeper enable, same as keeper count, keeper cluster by shards.
  replicaCount: 1
  # -- [object] Resource configuration for Clickhouse container
  resources:
    requests:
      cpu: "1.0"
      memory: 2048Mi
      ephemeral-storage: 50Mi
    limits:
      cpu: "2.0"
      memory: 5120Mi
      ephemeral-storage: 1024Mi
  # Enable persistence using Persistent Volume Claims
  persistence:
    # -- Enable persistence using PVC
    enabled: true
    # -- Persistent volume storage class
    # If defined, storageClassName: <storageClass>
    # If set to "-", storageClassName: "", which disables dynamic provisioning
    # If undefined (the default) or set to null, no storageClassName spec is
    #   set, choosing the default provisioner.  (gp2 on AWS, standard on
    #   GKE, AWS & OpenStack)
    storageClass: ""
    # -- Data volume size
    size: 5Gi
    # -- Name of an existing PVC
    existingClaim: ""
    # -- Template to specify an existing persistent volume
    # If set, the PVC can't have a PV dynamically provisioned for it
    # E.g.
    # selector:
    #   matchLabels:
    #     app: my-app
    selector: {}
  # ClickHouse TLS parameters
  tls:
    # -- [boolean, nullable] Generate automatically self-signed TLS certificates if nothing is provided
    autoGenerated: true
    # -- Certificate value
    cert: ""
    # -- Certificate key value
    certKey: ""
    # -- CA Certificate value
    certCA: ""
  # ClickHouse Authentication
  auth:
    # -- ClickHouse administrator name
    username: runtime-radar
    # -- ClickHouse administartor password
    password: ""
    # -- Name of the secret with the administrator password
    existingSecret: clickhouse
    # -- Name of the key stored in the existing secret
    existingSecretPasswordKey: CLICKHOUSE_PASSWORD
    # -- Name of the ClickHouse database
    database: runtime-radar
  # ClickHouse Metrics
  metrics:
    # -- Enable the export of Prometheus metrics
    enabled: false
    # -- ClickHouse metrics external host
    externalHost: ""

# @skip List of disabled by default tags in helm chart
tags:
  grafana: false
  prometheus: false
  loki: false
  monitoring: false
