/**
 * The list of error codes provided by RPC protocol.

 * @link: github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
 */
export enum ApiProtoCode {
    INVALID_ARGUMENT = 3,
    NOT_FOUND = 5,
    ALREADY_EXISTS = 6,
    PERMISSION_DENIED = 7,
    FAILED_PRECONDITION = 9,
    UNAVAILABLE = 14,
    UNAUTHENTICATED = 16
}

/**
 * The list of additional codes to detect inner issues based on Facebook Graph API.
 * An 'UnknownIssue' is a default code, which is not used on back-end.
 */
export enum ApiErrorCode {
    UNKNOWN_ISSUE = 'UNKNOWN_ISSUE',
    UNAUTHENTICATED = 'UNAUTHENTICATED',
    ACCESS_TOKEN_EXPIRED = 'ACCESS_TOKEN_EXPIRED',
    REFRESH_TOKEN_EXPIRED = 'REFRESH_TOKEN_EXPIRED',
    ACCESS_AND_REFRESH_TOKENS_CHANGED = 'ACCESS_AND_REFRESH_TOKENS_CHANGED',
    LAST_ADMIN_REMOVING_DENIED = 'LAST_ADMIN_REMOVING_DENIED',
    PASSWORD_UPDATE_FAILED = 'PASSWORD_UPDATE_FAILED',
    USER_ALREADY_EXIST = 'USER_ALREADY_EXIST',
    USER_DOES_NOT_EXIST = 'USER_DOES_NOT_EXIST',
    HAS_LINKED_USERS = 'HAS_LINKED_USERS',
    HAS_LINKED_RULES = 'HAS_LINKED_RULES',
    ARTIFACTORY_ALREADY_EXIST = 'ARTIFACTORY_ALREADY_EXIST',
    REGISTRIES_UNAVAILABLE = 'REGISTRIES_UNAVAILABLE',
    UNCONFIRMED_USER = 'UNCONFIRMED_USER',
    UNCONFIRMED_PASSWORD = 'UNCONFIRMED_PASSWORD',
    NOTIFICATION_IN_USE = 'NOTIFICATION_IN_USE',
    NAME_MUST_BE_UNIQUE = 'NAME_MUST_BE_UNIQUE',
    EMAIL_SERVER_INACCESSIBLE = 'EMAIL_SERVER_INACCESSIBLE',
    INTEGRATION_INACCESSIBLE = 'INTEGRATION_INACCESSIBLE',
    CATALOG_API_DOES_NOT_EXIST = 'CATALOG_API_DOES_NOT_EXIST',
    UNSUPPORTED_OSI_ARTIFACT = 'UNSUPPORTED_OSI_ARTIFACT',
    FLUS_ACCESS_DENIED = 'FLUS_ACCESS_DENIED',
    PERMISSION_DENIED = 'PERMISSION_DENIED',
    FLUS_OTHER = 'FLUS_OTHER',
    CRON_STRING_IS_NOT_VALID = 'CRON_STRING_IS_NOT_VALID',
    STATE_CHILD_UNREGISTERED = 'STATE_CHILD_UNREGISTERED',
    PASSWORD_HAS_BEEN_USED_BEFORE = 'PASSWORD_HAS_BEEN_USED_BEFORE',
    PASSWORD_FOUND_IN_PASS_LIST = 'PASSWORD_FOUND_IN_PASS_LIST'
}

export interface ApiDetails {
    reason: ApiErrorCode;
    domain: string;
    metadata: unknown; // @todo: update type when an example will be provided
}

export interface ApiErrorResponse {
    code: ApiProtoCode;
    message: string;
    details: ApiDetails[];
}
