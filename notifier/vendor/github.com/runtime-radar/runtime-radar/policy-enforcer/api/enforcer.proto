syntax = "proto3";

package enforcer;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "rule.proto";

option go_package = "./api";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Enforcer API";
    contact: {
    };
  };
};

// The Enforcer service definition.
service Enforcer {
    // EvaluatePolicyRuntimeEvent returns EvaluatePolicyRuntimeEventReq enriched with evaluated policies.
    rpc EvaluatePolicyRuntimeEvent(EvaluatePolicyRuntimeEventReq) returns (EvaluatePolicyRuntimeEventReq) {
        option (google.api.http) = {
            post: "/api/v1/evaluate-policy/runtime"
            body: "*"
        };
    }
}

message EvaluatePolicyRuntimeEventReq {
  string actor = 1;

  message Action {
    string type = 1;

    message Args {
      string namespace = 1;
      string pod = 2;
      string container = 3;
      string binary = 4;
      string node = 5;
      string image_name = 6;
      string registry = 7;
    }

    Args args = 2;
  }

  message Result {
    message Event {
      // name and version are not used at the moment and are added for consistency reasons and future purposes
      string name = 1;
      string version = 2;
      // detector_id is identifier of detector which processes events within event-processor
      string detector_id = 3;
      string severity = 4;

      optional Policy policy = 5;
    }

    repeated Event events = 1;
  }

  Action action = 2;
  Result result = 3;
}


message Policy {
  repeated rule.Rule block_by = 1;
  repeated rule.Rule notify_by = 2;
}
