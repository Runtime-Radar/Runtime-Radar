// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Hubble

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v4.25.3
// source: tetragon/sensors.proto

package tetragon

import (
	wrapperspb "github.com/knqyf263/go-plugin/types/known/wrapperspb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TracingPolicyState int32

const (
	// unknown state
	TracingPolicyState_TP_STATE_UNKNOWN TracingPolicyState = 0
	// loaded and enabled
	TracingPolicyState_TP_STATE_ENABLED TracingPolicyState = 1
	// loaded but disabled
	TracingPolicyState_TP_STATE_DISABLED TracingPolicyState = 2
	// failed to load
	TracingPolicyState_TP_STATE_LOAD_ERROR TracingPolicyState = 3
	// failed during lifetime
	TracingPolicyState_TP_STATE_ERROR TracingPolicyState = 4
	// in the process of loading
	TracingPolicyState_TP_STATE_LOADING TracingPolicyState = 5
	// in the process of unloading
	TracingPolicyState_TP_STATE_UNLOADING TracingPolicyState = 6
)

// Enum value maps for TracingPolicyState.
var (
	TracingPolicyState_name = map[int32]string{
		0: "TP_STATE_UNKNOWN",
		1: "TP_STATE_ENABLED",
		2: "TP_STATE_DISABLED",
		3: "TP_STATE_LOAD_ERROR",
		4: "TP_STATE_ERROR",
		5: "TP_STATE_LOADING",
		6: "TP_STATE_UNLOADING",
	}
	TracingPolicyState_value = map[string]int32{
		"TP_STATE_UNKNOWN":    0,
		"TP_STATE_ENABLED":    1,
		"TP_STATE_DISABLED":   2,
		"TP_STATE_LOAD_ERROR": 3,
		"TP_STATE_ERROR":      4,
		"TP_STATE_LOADING":    5,
		"TP_STATE_UNLOADING":  6,
	}
)

func (x TracingPolicyState) Enum() *TracingPolicyState {
	p := new(TracingPolicyState)
	*p = x
	return p
}

// For now, we only want to support debug-related config flags to be configurable.
type ConfigFlag int32

const (
	ConfigFlag_CONFIG_FLAG_LOG_LEVEL          ConfigFlag = 0
	ConfigFlag_CONFIG_FLAG_DUMP_PROCESS_CACHE ConfigFlag = 1
)

// Enum value maps for ConfigFlag.
var (
	ConfigFlag_name = map[int32]string{
		0: "CONFIG_FLAG_LOG_LEVEL",
		1: "CONFIG_FLAG_DUMP_PROCESS_CACHE",
	}
	ConfigFlag_value = map[string]int32{
		"CONFIG_FLAG_LOG_LEVEL":          0,
		"CONFIG_FLAG_DUMP_PROCESS_CACHE": 1,
	}
)

func (x ConfigFlag) Enum() *ConfigFlag {
	p := new(ConfigFlag)
	*p = x
	return p
}

type LogLevel int32

const (
	LogLevel_LOG_LEVEL_PANIC LogLevel = 0
	LogLevel_LOG_LEVEL_FATAL LogLevel = 1
	LogLevel_LOG_LEVEL_ERROR LogLevel = 2
	LogLevel_LOG_LEVEL_WARN  LogLevel = 3
	LogLevel_LOG_LEVEL_INFO  LogLevel = 4
	LogLevel_LOG_LEVEL_DEBUG LogLevel = 5
	LogLevel_LOG_LEVEL_TRACE LogLevel = 6
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_PANIC",
		1: "LOG_LEVEL_FATAL",
		2: "LOG_LEVEL_ERROR",
		3: "LOG_LEVEL_WARN",
		4: "LOG_LEVEL_INFO",
		5: "LOG_LEVEL_DEBUG",
		6: "LOG_LEVEL_TRACE",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_PANIC": 0,
		"LOG_LEVEL_FATAL": 1,
		"LOG_LEVEL_ERROR": 2,
		"LOG_LEVEL_WARN":  3,
		"LOG_LEVEL_INFO":  4,
		"LOG_LEVEL_DEBUG": 5,
		"LOG_LEVEL_TRACE": 6,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

type ListSensorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSensorsRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

type SensorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the sensor
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// enabled marks whether the sensor is enabled
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// collection is the collection the sensor belongs to (typically a tracing policy)
	Collection string `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *SensorStatus) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *SensorStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SensorStatus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SensorStatus) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type ListSensorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors []*SensorStatus `protobuf:"bytes,1,rep,name=sensors,proto3" json:"sensors,omitempty"`
}

func (x *ListSensorsResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ListSensorsResponse) GetSensors() []*SensorStatus {
	if x != nil {
		return x.Sensors
	}
	return nil
}

type ListTracingPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTracingPoliciesRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

type TracingPolicyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the id of the policy
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is the name of the policy
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// namespace is the namespace of the policy (or empty of the policy is global)
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// info is additional information about the policy
	Info string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	// sensors loaded in the scope of this policy
	Sensors []string `protobuf:"bytes,5,rep,name=sensors,proto3" json:"sensors,omitempty"`
	// indicating if the policy is enabled. Deprecated: use 'state' instead.
	//
	// Deprecated: Do not use.
	Enabled bool `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// filter ID of the policy used for k8s filtering
	FilterId uint64 `protobuf:"varint,7,opt,name=filter_id,json=filterId,proto3" json:"filter_id,omitempty"`
	// potential error of the policy
	Error string `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	// current state of the tracing policy
	State TracingPolicyState `protobuf:"varint,9,opt,name=state,proto3,enum=tetragon.TracingPolicyState" json:"state,omitempty"`
	// the amount of kernel memory in bytes used by policy's sensors non-shared BPF maps (memlock)
	KernelMemoryBytes uint64 `protobuf:"varint,10,opt,name=kernel_memory_bytes,json=kernelMemoryBytes,proto3" json:"kernel_memory_bytes,omitempty"`
}

func (x *TracingPolicyStatus) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TracingPolicyStatus) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TracingPolicyStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TracingPolicyStatus) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TracingPolicyStatus) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *TracingPolicyStatus) GetSensors() []string {
	if x != nil {
		return x.Sensors
	}
	return nil
}

// Deprecated: Do not use.
func (x *TracingPolicyStatus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TracingPolicyStatus) GetFilterId() uint64 {
	if x != nil {
		return x.FilterId
	}
	return 0
}

func (x *TracingPolicyStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TracingPolicyStatus) GetState() TracingPolicyState {
	if x != nil {
		return x.State
	}
	return TracingPolicyState_TP_STATE_UNKNOWN
}

func (x *TracingPolicyStatus) GetKernelMemoryBytes() uint64 {
	if x != nil {
		return x.KernelMemoryBytes
	}
	return 0
}

type ListTracingPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*TracingPolicyStatus `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *ListTracingPoliciesResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ListTracingPoliciesResponse) GetPolicies() []*TracingPolicyStatus {
	if x != nil {
		return x.Policies
	}
	return nil
}

type AddTracingPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yaml string `protobuf:"bytes,1,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *AddTracingPolicyRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *AddTracingPolicyRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type AddTracingPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTracingPolicyResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

type DeleteTracingPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *DeleteTracingPolicyRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *DeleteTracingPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteTracingPolicyRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type DeleteTracingPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTracingPolicyResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

type EnableTracingPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *EnableTracingPolicyRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *EnableTracingPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnableTracingPolicyRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type EnableTracingPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableTracingPolicyResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

type DisableTracingPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *DisableTracingPolicyRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *DisableTracingPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DisableTracingPolicyRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type DisableTracingPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableTracingPolicyResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

type RemoveSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RemoveSensorRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *RemoveSensorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RemoveSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSensorResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

type EnableSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EnableSensorRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *EnableSensorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EnableSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableSensorResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

type DisableSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DisableSensorRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *DisableSensorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DisableSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableSensorResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

type GetStackTraceTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetStackTraceTreeRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetStackTraceTreeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetStackTraceTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root *StackTraceNode `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *GetStackTraceTreeResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetStackTraceTreeResponse) GetRoot() *StackTraceNode {
	if x != nil {
		return x.Root
	}
	return nil
}

type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DumpProcessCacheReqArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkipZeroRefcnt            bool `protobuf:"varint,1,opt,name=skip_zero_refcnt,json=skipZeroRefcnt,proto3" json:"skip_zero_refcnt,omitempty"`
	ExcludeExecveMapProcesses bool `protobuf:"varint,2,opt,name=exclude_execve_map_processes,json=excludeExecveMapProcesses,proto3" json:"exclude_execve_map_processes,omitempty"`
}

func (x *DumpProcessCacheReqArgs) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *DumpProcessCacheReqArgs) GetSkipZeroRefcnt() bool {
	if x != nil {
		return x.SkipZeroRefcnt
	}
	return false
}

func (x *DumpProcessCacheReqArgs) GetExcludeExecveMapProcesses() bool {
	if x != nil {
		return x.ExcludeExecveMapProcesses
	}
	return false
}

type ProcessInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process *Process                `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Color   string                  `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	Refcnt  *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=refcnt,proto3" json:"refcnt,omitempty"`
	// refcnt_ops is a map of operations to refcnt change
	// keys can be:
	// - "process++": process increased refcnt (i.e. this process starts)
	// - "process--": process decreased refcnt (i.e. this process exits)
	// - "parent++": parent increased refcnt (i.e. a process starts that has this process as a parent)
	// - "parent--": parent decreased refcnt (i.e. a process exits that has this process as a parent)
	RefcntOps map[string]int32 `protobuf:"bytes,4,rep,name=refcnt_ops,json=refcntOps,proto3" json:"refcnt_ops,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ProcessInternal) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ProcessInternal) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessInternal) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *ProcessInternal) GetRefcnt() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Refcnt
	}
	return nil
}

func (x *ProcessInternal) GetRefcntOps() map[string]int32 {
	if x != nil {
		return x.RefcntOps
	}
	return nil
}

type DumpProcessCacheResArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processes []*ProcessInternal `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
}

func (x *DumpProcessCacheResArgs) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *DumpProcessCacheResArgs) GetProcesses() []*ProcessInternal {
	if x != nil {
		return x.Processes
	}
	return nil
}

type GetDebugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag ConfigFlag `protobuf:"varint,1,opt,name=flag,proto3,enum=tetragon.ConfigFlag" json:"flag,omitempty"`
	// Types that are assignable to Arg:
	//
	//	*GetDebugRequest_Dump
	Arg isGetDebugRequest_Arg `protobuf_oneof:"arg"`
}

func (x *GetDebugRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetDebugRequest) GetFlag() ConfigFlag {
	if x != nil {
		return x.Flag
	}
	return ConfigFlag_CONFIG_FLAG_LOG_LEVEL
}

func (m *GetDebugRequest) GetArg() isGetDebugRequest_Arg {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (x *GetDebugRequest) GetDump() *DumpProcessCacheReqArgs {
	if x, ok := x.GetArg().(*GetDebugRequest_Dump); ok {
		return x.Dump
	}
	return nil
}

type isGetDebugRequest_Arg interface {
	isGetDebugRequest_Arg()
}

type GetDebugRequest_Dump struct {
	Dump *DumpProcessCacheReqArgs `protobuf:"bytes,2,opt,name=dump,proto3,oneof"`
}

func (*GetDebugRequest_Dump) isGetDebugRequest_Arg() {}

type GetDebugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag ConfigFlag `protobuf:"varint,1,opt,name=flag,proto3,enum=tetragon.ConfigFlag" json:"flag,omitempty"`
	// Types that are assignable to Arg:
	//
	//	*GetDebugResponse_Level
	//	*GetDebugResponse_Processes
	Arg isGetDebugResponse_Arg `protobuf_oneof:"arg"`
}

func (x *GetDebugResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetDebugResponse) GetFlag() ConfigFlag {
	if x != nil {
		return x.Flag
	}
	return ConfigFlag_CONFIG_FLAG_LOG_LEVEL
}

func (m *GetDebugResponse) GetArg() isGetDebugResponse_Arg {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (x *GetDebugResponse) GetLevel() LogLevel {
	if x, ok := x.GetArg().(*GetDebugResponse_Level); ok {
		return x.Level
	}
	return LogLevel_LOG_LEVEL_PANIC
}

func (x *GetDebugResponse) GetProcesses() *DumpProcessCacheResArgs {
	if x, ok := x.GetArg().(*GetDebugResponse_Processes); ok {
		return x.Processes
	}
	return nil
}

type isGetDebugResponse_Arg interface {
	isGetDebugResponse_Arg()
}

type GetDebugResponse_Level struct {
	Level LogLevel `protobuf:"varint,2,opt,name=level,proto3,enum=tetragon.LogLevel,oneof"`
}

type GetDebugResponse_Processes struct {
	Processes *DumpProcessCacheResArgs `protobuf:"bytes,3,opt,name=processes,proto3,oneof"`
}

func (*GetDebugResponse_Level) isGetDebugResponse_Arg() {}

func (*GetDebugResponse_Processes) isGetDebugResponse_Arg() {}

type SetDebugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag ConfigFlag `protobuf:"varint,1,opt,name=flag,proto3,enum=tetragon.ConfigFlag" json:"flag,omitempty"`
	// Types that are assignable to Arg:
	//
	//	*SetDebugRequest_Level
	Arg isSetDebugRequest_Arg `protobuf_oneof:"arg"`
}

func (x *SetDebugRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *SetDebugRequest) GetFlag() ConfigFlag {
	if x != nil {
		return x.Flag
	}
	return ConfigFlag_CONFIG_FLAG_LOG_LEVEL
}

func (m *SetDebugRequest) GetArg() isSetDebugRequest_Arg {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (x *SetDebugRequest) GetLevel() LogLevel {
	if x, ok := x.GetArg().(*SetDebugRequest_Level); ok {
		return x.Level
	}
	return LogLevel_LOG_LEVEL_PANIC
}

type isSetDebugRequest_Arg interface {
	isSetDebugRequest_Arg()
}

type SetDebugRequest_Level struct {
	Level LogLevel `protobuf:"varint,2,opt,name=level,proto3,enum=tetragon.LogLevel,oneof"`
}

func (*SetDebugRequest_Level) isSetDebugRequest_Arg() {}

type SetDebugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag ConfigFlag `protobuf:"varint,1,opt,name=flag,proto3,enum=tetragon.ConfigFlag" json:"flag,omitempty"`
	// Types that are assignable to Arg:
	//
	//	*SetDebugResponse_Level
	Arg isSetDebugResponse_Arg `protobuf_oneof:"arg"`
}

func (x *SetDebugResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *SetDebugResponse) GetFlag() ConfigFlag {
	if x != nil {
		return x.Flag
	}
	return ConfigFlag_CONFIG_FLAG_LOG_LEVEL
}

func (m *SetDebugResponse) GetArg() isSetDebugResponse_Arg {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (x *SetDebugResponse) GetLevel() LogLevel {
	if x, ok := x.GetArg().(*SetDebugResponse_Level); ok {
		return x.Level
	}
	return LogLevel_LOG_LEVEL_PANIC
}

type isSetDebugResponse_Arg interface {
	isSetDebugResponse_Arg()
}

type SetDebugResponse_Level struct {
	Level LogLevel `protobuf:"varint,2,opt,name=level,proto3,enum=tetragon.LogLevel,oneof"`
}

func (*SetDebugResponse_Level) isSetDebugResponse_Arg() {}
