// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Hubble

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v4.25.3
// source: tetragon/events.proto

package tetragon

import (
	durationpb "github.com/knqyf263/go-plugin/types/known/durationpb"
	timestamppb "github.com/knqyf263/go-plugin/types/known/timestamppb"
	wrapperspb "github.com/knqyf263/go-plugin/types/known/wrapperspb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the type of a Tetragon event.
//
// NOTE: EventType constants must be in sync with the numbers used in the
// GetEventsResponse event oneof.
type EventType int32

const (
	EventType_UNDEF              EventType = 0
	EventType_PROCESS_EXEC       EventType = 1
	EventType_PROCESS_EXIT       EventType = 5
	EventType_PROCESS_KPROBE     EventType = 9
	EventType_PROCESS_TRACEPOINT EventType = 10
	EventType_PROCESS_LOADER     EventType = 11
	EventType_PROCESS_UPROBE     EventType = 12
	EventType_PROCESS_THROTTLE   EventType = 27
	EventType_PROCESS_LSM        EventType = 28
	EventType_TEST               EventType = 40000
	EventType_RATE_LIMIT_INFO    EventType = 40001
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:     "UNDEF",
		1:     "PROCESS_EXEC",
		5:     "PROCESS_EXIT",
		9:     "PROCESS_KPROBE",
		10:    "PROCESS_TRACEPOINT",
		11:    "PROCESS_LOADER",
		12:    "PROCESS_UPROBE",
		27:    "PROCESS_THROTTLE",
		28:    "PROCESS_LSM",
		40000: "TEST",
		40001: "RATE_LIMIT_INFO",
	}
	EventType_value = map[string]int32{
		"UNDEF":              0,
		"PROCESS_EXEC":       1,
		"PROCESS_EXIT":       5,
		"PROCESS_KPROBE":     9,
		"PROCESS_TRACEPOINT": 10,
		"PROCESS_LOADER":     11,
		"PROCESS_UPROBE":     12,
		"PROCESS_THROTTLE":   27,
		"PROCESS_LSM":        28,
		"TEST":               40000,
		"RATE_LIMIT_INFO":    40001,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

// Determines the behavior of a field filter
type FieldFilterAction int32

const (
	FieldFilterAction_INCLUDE FieldFilterAction = 0
	FieldFilterAction_EXCLUDE FieldFilterAction = 1
)

// Enum value maps for FieldFilterAction.
var (
	FieldFilterAction_name = map[int32]string{
		0: "INCLUDE",
		1: "EXCLUDE",
	}
	FieldFilterAction_value = map[string]int32{
		"INCLUDE": 0,
		"EXCLUDE": 1,
	}
)

func (x FieldFilterAction) Enum() *FieldFilterAction {
	p := new(FieldFilterAction)
	*p = x
	return p
}

type ThrottleType int32

const (
	ThrottleType_THROTTLE_UNKNOWN ThrottleType = 0
	ThrottleType_THROTTLE_START   ThrottleType = 1
	ThrottleType_THROTTLE_STOP    ThrottleType = 2
)

// Enum value maps for ThrottleType.
var (
	ThrottleType_name = map[int32]string{
		0: "THROTTLE_UNKNOWN",
		1: "THROTTLE_START",
		2: "THROTTLE_STOP",
	}
	ThrottleType_value = map[string]int32{
		"THROTTLE_UNKNOWN": 0,
		"THROTTLE_START":   1,
		"THROTTLE_STOP":    2,
	}
)

func (x ThrottleType) Enum() *ThrottleType {
	p := new(ThrottleType)
	*p = x
	return p
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinaryRegex []string              `protobuf:"bytes,1,rep,name=binary_regex,json=binaryRegex,proto3" json:"binary_regex,omitempty"`
	Namespace   []string              `protobuf:"bytes,2,rep,name=namespace,proto3" json:"namespace,omitempty"`
	HealthCheck *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	Pid         []uint32              `protobuf:"varint,4,rep,packed,name=pid,proto3" json:"pid,omitempty"`
	// Filter by the PID of a process and any of its descendants. Note that this filter is
	// intended for testing and development purposes only and should not be used in
	// production. In particular, PID cycling in the OS over longer periods of time may
	// cause unexpected events to pass this filter.
	PidSet   []uint32    `protobuf:"varint,5,rep,packed,name=pid_set,json=pidSet,proto3" json:"pid_set,omitempty"`
	EventSet []EventType `protobuf:"varint,6,rep,packed,name=event_set,json=eventSet,proto3,enum=tetragon.EventType" json:"event_set,omitempty"`
	// Filter by process.pod.name field using RE2 regular expression syntax:
	// https://github.com/google/re2/wiki/Syntax
	PodRegex []string `protobuf:"bytes,7,rep,name=pod_regex,json=podRegex,proto3" json:"pod_regex,omitempty"`
	// Filter by process.arguments field using RE2 regular expression syntax:
	// https://github.com/google/re2/wiki/Syntax
	ArgumentsRegex []string `protobuf:"bytes,8,rep,name=arguments_regex,json=argumentsRegex,proto3" json:"arguments_regex,omitempty"`
	// Filter events by pod labels using Kubernetes label selector syntax:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	// Note that this filter never matches events without the pod field (i.e.
	// host process events).
	Labels []string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`
	// Filter events by tracing policy names
	PolicyNames []string `protobuf:"bytes,10,rep,name=policy_names,json=policyNames,proto3" json:"policy_names,omitempty"`
	// Filter events by Linux process capability
	Capabilities *CapFilter `protobuf:"bytes,11,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Filter parent process' binary using RE2 regular expression syntax.
	ParentBinaryRegex []string `protobuf:"bytes,12,rep,name=parent_binary_regex,json=parentBinaryRegex,proto3" json:"parent_binary_regex,omitempty"`
	// Filter using CEL expressions. CEL filters support IP and CIDR notiation extensions from the k8s project.
	// See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#IP and https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#CIDR for details.
	CelExpression []string `protobuf:"bytes,13,rep,name=cel_expression,json=celExpression,proto3" json:"cel_expression,omitempty"`
	// Filter by process.parent.arguments field using RE2 regular expression syntax:
	// https://github.com/google/re2/wiki/Syntax
	ParentArgumentsRegex []string `protobuf:"bytes,14,rep,name=parent_arguments_regex,json=parentArgumentsRegex,proto3" json:"parent_arguments_regex,omitempty"`
	// Filter by the container ID in the process.docker field using RE2 regular expression syntax:
	// https://github.com/google/re2/wiki/Syntax
	ContainerId []string `protobuf:"bytes,15,rep,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Filter containerized processes based on whether they are descendants of
	// the container's init process. This can be used, for example, to watch
	// for processes injected into a container via docker exec, kubectl exec, or
	// similar mechanisms.
	InInitTree *wrapperspb.BoolValue `protobuf:"bytes,16,opt,name=in_init_tree,json=inInitTree,proto3" json:"in_init_tree,omitempty"`
}

func (x *Filter) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *Filter) GetBinaryRegex() []string {
	if x != nil {
		return x.BinaryRegex
	}
	return nil
}

func (x *Filter) GetNamespace() []string {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Filter) GetHealthCheck() *wrapperspb.BoolValue {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *Filter) GetPid() []uint32 {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *Filter) GetPidSet() []uint32 {
	if x != nil {
		return x.PidSet
	}
	return nil
}

func (x *Filter) GetEventSet() []EventType {
	if x != nil {
		return x.EventSet
	}
	return nil
}

func (x *Filter) GetPodRegex() []string {
	if x != nil {
		return x.PodRegex
	}
	return nil
}

func (x *Filter) GetArgumentsRegex() []string {
	if x != nil {
		return x.ArgumentsRegex
	}
	return nil
}

func (x *Filter) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Filter) GetPolicyNames() []string {
	if x != nil {
		return x.PolicyNames
	}
	return nil
}

func (x *Filter) GetCapabilities() *CapFilter {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *Filter) GetParentBinaryRegex() []string {
	if x != nil {
		return x.ParentBinaryRegex
	}
	return nil
}

func (x *Filter) GetCelExpression() []string {
	if x != nil {
		return x.CelExpression
	}
	return nil
}

func (x *Filter) GetParentArgumentsRegex() []string {
	if x != nil {
		return x.ParentArgumentsRegex
	}
	return nil
}

func (x *Filter) GetContainerId() []string {
	if x != nil {
		return x.ContainerId
	}
	return nil
}

func (x *Filter) GetInInitTree() *wrapperspb.BoolValue {
	if x != nil {
		return x.InInitTree
	}
	return nil
}

// Filter over a set of Linux process capabilities. See `message Capabilities`
// for more info.  WARNING: Multiple sets are ANDed. For example, if the
// permitted filter matches, but the effective filter does not, the filter will
// NOT match.
type CapFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter over the set of permitted capabilities.
	Permitted *CapFilterSet `protobuf:"bytes,1,opt,name=permitted,proto3" json:"permitted,omitempty"`
	// Filter over the set of effective capabilities.
	Effective *CapFilterSet `protobuf:"bytes,2,opt,name=effective,proto3" json:"effective,omitempty"`
	// Filter over the set of inheritable capabilities.
	Inheritable *CapFilterSet `protobuf:"bytes,3,opt,name=inheritable,proto3" json:"inheritable,omitempty"`
}

func (x *CapFilter) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *CapFilter) GetPermitted() *CapFilterSet {
	if x != nil {
		return x.Permitted
	}
	return nil
}

func (x *CapFilter) GetEffective() *CapFilterSet {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *CapFilter) GetInheritable() *CapFilterSet {
	if x != nil {
		return x.Inheritable
	}
	return nil
}

// Capability set to filter over. NOTE: you may specify only ONE set here.
type CapFilterSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Match if the capability set contains any of the capabilities defined in this filter.
	Any []CapabilitiesType `protobuf:"varint,1,rep,packed,name=any,proto3,enum=tetragon.CapabilitiesType" json:"any,omitempty"`
	// Match if the capability set contains all of the capabilities defined in this filter.
	All []CapabilitiesType `protobuf:"varint,2,rep,packed,name=all,proto3,enum=tetragon.CapabilitiesType" json:"all,omitempty"`
	// Match if the capability set exactly matches all of the capabilities defined in this filter.
	Exactly []CapabilitiesType `protobuf:"varint,3,rep,packed,name=exactly,proto3,enum=tetragon.CapabilitiesType" json:"exactly,omitempty"`
	// Match if the capability set contains none of the capabilities defined in this filter.
	None []CapabilitiesType `protobuf:"varint,4,rep,packed,name=none,proto3,enum=tetragon.CapabilitiesType" json:"none,omitempty"`
}

func (x *CapFilterSet) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *CapFilterSet) GetAny() []CapabilitiesType {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *CapFilterSet) GetAll() []CapabilitiesType {
	if x != nil {
		return x.All
	}
	return nil
}

func (x *CapFilterSet) GetExactly() []CapabilitiesType {
	if x != nil {
		return x.Exactly
	}
	return nil
}

func (x *CapFilterSet) GetNone() []CapabilitiesType {
	if x != nil {
		return x.None
	}
	return nil
}

type RedactionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated, do not use.
	//
	// Deprecated: Do not use.
	Match []*Filter `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"`
	// RE2 regular expressions to use for redaction. Strings inside capture groups are redacted.
	Redact []string `protobuf:"bytes,2,rep,name=redact,proto3" json:"redact,omitempty"`
	// RE2 regular expression to match binary name. If supplied, redactions will only be applied to matching processes.
	BinaryRegex []string `protobuf:"bytes,3,rep,name=binary_regex,json=binaryRegex,proto3" json:"binary_regex,omitempty"`
}

func (x *RedactionFilter) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

// Deprecated: Do not use.
func (x *RedactionFilter) GetMatch() []*Filter {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *RedactionFilter) GetRedact() []string {
	if x != nil {
		return x.Redact
	}
	return nil
}

func (x *RedactionFilter) GetBinaryRegex() []string {
	if x != nil {
		return x.BinaryRegex
	}
	return nil
}

// AggregationOptions defines configuration options for aggregating events.
type AggregationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Aggregation window size. Defaults to 15 seconds if this field is not set.
	WindowSize *durationpb.Duration `protobuf:"bytes,1,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	// Size of the buffer for the aggregator to receive incoming events. If the
	// buffer becomes full, the aggregator will log a warning and start dropping
	// incoming events.
	ChannelBufferSize uint64 `protobuf:"varint,2,opt,name=channel_buffer_size,json=channelBufferSize,proto3" json:"channel_buffer_size,omitempty"`
}

func (x *AggregationOptions) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *AggregationOptions) GetWindowSize() *durationpb.Duration {
	if x != nil {
		return x.WindowSize
	}
	return nil
}

func (x *AggregationOptions) GetChannelBufferSize() uint64 {
	if x != nil {
		return x.ChannelBufferSize
	}
	return 0
}

// AggregationInfo contains information about aggregation results.
type AggregationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total count of events in this aggregation time window.
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AggregationInfo) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *AggregationInfo) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RateLimitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfDroppedProcessEvents uint64 `protobuf:"varint,1,opt,name=number_of_dropped_process_events,json=numberOfDroppedProcessEvents,proto3" json:"number_of_dropped_process_events,omitempty"`
}

func (x *RateLimitInfo) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *RateLimitInfo) GetNumberOfDroppedProcessEvents() uint64 {
	if x != nil {
		return x.NumberOfDroppedProcessEvents
	}
	return 0
}

type ProcessThrottle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Throttle type
	Type ThrottleType `protobuf:"varint,1,opt,name=type,proto3,enum=tetragon.ThrottleType" json:"type,omitempty"`
	// Cgroup name
	Cgroup string `protobuf:"bytes,2,opt,name=cgroup,proto3" json:"cgroup,omitempty"`
}

func (x *ProcessThrottle) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ProcessThrottle) GetType() ThrottleType {
	if x != nil {
		return x.Type
	}
	return ThrottleType_THROTTLE_UNKNOWN
}

func (x *ProcessThrottle) GetCgroup() string {
	if x != nil {
		return x.Cgroup
	}
	return ""
}

type GetEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type-specific fields of an event.
	//
	// NOTE: Numbers must stay in sync with enum EventType.
	//
	// Types that are assignable to Event:
	//
	//	*GetEventsResponse_ProcessExec
	//	*GetEventsResponse_ProcessExit
	//	*GetEventsResponse_ProcessKprobe
	//	*GetEventsResponse_ProcessTracepoint
	//	*GetEventsResponse_ProcessLoader
	//	*GetEventsResponse_ProcessUprobe
	//	*GetEventsResponse_ProcessThrottle
	//	*GetEventsResponse_ProcessLsm
	//	*GetEventsResponse_Test
	//	*GetEventsResponse_RateLimitInfo
	Event isGetEventsResponse_Event `protobuf_oneof:"event"`
	// Name of the node where this event was observed.
	NodeName string `protobuf:"bytes,1000,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Timestamp at which this event was observed.
	// For an aggregated response, this field to set to the timestamp at which
	// the event was observed for the first time in a given aggregation time window.
	Time *timestamppb.Timestamp `protobuf:"bytes,1001,opt,name=time,proto3" json:"time,omitempty"`
	// aggregation_info contains information about aggregation results. This field
	// is set only for aggregated responses.
	AggregationInfo *AggregationInfo `protobuf:"bytes,1002,opt,name=aggregation_info,json=aggregationInfo,proto3" json:"aggregation_info,omitempty"`
	// Name of the cluster where this event was observed.
	ClusterName string `protobuf:"bytes,1003,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *GetEventsResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (m *GetEventsResponse) GetEvent() isGetEventsResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *GetEventsResponse) GetProcessExec() *ProcessExec {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessExec); ok {
		return x.ProcessExec
	}
	return nil
}

func (x *GetEventsResponse) GetProcessExit() *ProcessExit {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessExit); ok {
		return x.ProcessExit
	}
	return nil
}

func (x *GetEventsResponse) GetProcessKprobe() *ProcessKprobe {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessKprobe); ok {
		return x.ProcessKprobe
	}
	return nil
}

func (x *GetEventsResponse) GetProcessTracepoint() *ProcessTracepoint {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessTracepoint); ok {
		return x.ProcessTracepoint
	}
	return nil
}

func (x *GetEventsResponse) GetProcessLoader() *ProcessLoader {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessLoader); ok {
		return x.ProcessLoader
	}
	return nil
}

func (x *GetEventsResponse) GetProcessUprobe() *ProcessUprobe {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessUprobe); ok {
		return x.ProcessUprobe
	}
	return nil
}

func (x *GetEventsResponse) GetProcessThrottle() *ProcessThrottle {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessThrottle); ok {
		return x.ProcessThrottle
	}
	return nil
}

func (x *GetEventsResponse) GetProcessLsm() *ProcessLsm {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessLsm); ok {
		return x.ProcessLsm
	}
	return nil
}

func (x *GetEventsResponse) GetTest() *Test {
	if x, ok := x.GetEvent().(*GetEventsResponse_Test); ok {
		return x.Test
	}
	return nil
}

func (x *GetEventsResponse) GetRateLimitInfo() *RateLimitInfo {
	if x, ok := x.GetEvent().(*GetEventsResponse_RateLimitInfo); ok {
		return x.RateLimitInfo
	}
	return nil
}

func (x *GetEventsResponse) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *GetEventsResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GetEventsResponse) GetAggregationInfo() *AggregationInfo {
	if x != nil {
		return x.AggregationInfo
	}
	return nil
}

func (x *GetEventsResponse) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type isGetEventsResponse_Event interface {
	isGetEventsResponse_Event()
}

type GetEventsResponse_ProcessExec struct {
	// ProcessExec event includes information about the execution of
	// binaries and other related process metadata.
	ProcessExec *ProcessExec `protobuf:"bytes,1,opt,name=process_exec,json=processExec,proto3,oneof"`
}

type GetEventsResponse_ProcessExit struct {
	// ProcessExit event indicates how and when a process terminates.
	ProcessExit *ProcessExit `protobuf:"bytes,5,opt,name=process_exit,json=processExit,proto3,oneof"`
}

type GetEventsResponse_ProcessKprobe struct {
	// ProcessKprobe event contains information about the pre-defined
	// functions and the process that invoked them.
	ProcessKprobe *ProcessKprobe `protobuf:"bytes,9,opt,name=process_kprobe,json=processKprobe,proto3,oneof"`
}

type GetEventsResponse_ProcessTracepoint struct {
	// ProcessTracepoint contains information about the pre-defined
	// tracepoint and the process that invoked them.
	ProcessTracepoint *ProcessTracepoint `protobuf:"bytes,10,opt,name=process_tracepoint,json=processTracepoint,proto3,oneof"`
}

type GetEventsResponse_ProcessLoader struct {
	ProcessLoader *ProcessLoader `protobuf:"bytes,11,opt,name=process_loader,json=processLoader,proto3,oneof"`
}

type GetEventsResponse_ProcessUprobe struct {
	ProcessUprobe *ProcessUprobe `protobuf:"bytes,12,opt,name=process_uprobe,json=processUprobe,proto3,oneof"`
}

type GetEventsResponse_ProcessThrottle struct {
	ProcessThrottle *ProcessThrottle `protobuf:"bytes,27,opt,name=process_throttle,json=processThrottle,proto3,oneof"`
}

type GetEventsResponse_ProcessLsm struct {
	ProcessLsm *ProcessLsm `protobuf:"bytes,28,opt,name=process_lsm,json=processLsm,proto3,oneof"`
}

type GetEventsResponse_Test struct {
	Test *Test `protobuf:"bytes,40000,opt,name=test,proto3,oneof"`
}

type GetEventsResponse_RateLimitInfo struct {
	RateLimitInfo *RateLimitInfo `protobuf:"bytes,40001,opt,name=rate_limit_info,json=rateLimitInfo,proto3,oneof"`
}

func (*GetEventsResponse_ProcessExec) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ProcessExit) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ProcessKprobe) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ProcessTracepoint) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ProcessLoader) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ProcessUprobe) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ProcessThrottle) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ProcessLsm) isGetEventsResponse_Event() {}

func (*GetEventsResponse_Test) isGetEventsResponse_Event() {}

func (*GetEventsResponse_RateLimitInfo) isGetEventsResponse_Event() {}
