// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Hubble

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v4.25.3
// source: tetragon/bpf.proto

package tetragon

import (
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BpfCmd int32

const (
	// Create a map and return a file descriptor that refers to the
	// map.
	BpfCmd_BPF_MAP_CREATE BpfCmd = 0
	// Look up an element with a given key in the map referred to
	// by the file descriptor map_fd.
	BpfCmd_BPF_MAP_LOOKUP_ELEM BpfCmd = 1
	// Create or update an element (key/value pair) in a specified map.
	BpfCmd_BPF_MAP_UPDATE_ELEM BpfCmd = 2
	// Look up and delete an element by key in a specified map.
	BpfCmd_BPF_MAP_DELETE_ELEM BpfCmd = 3
	// Look up an element by key in a specified map and return the key
	// of the next element. Can be used to iterate over all elements
	// in the map.
	BpfCmd_BPF_MAP_GET_NEXT_KEY BpfCmd = 4
	// Verify and load an eBPF program, returning a new file descriptor
	// associated with the program.
	BpfCmd_BPF_PROG_LOAD BpfCmd = 5
	// Pin an eBPF program or map referred by the specified bpf_fd
	// to the provided pathname on the filesystem.
	BpfCmd_BPF_OBJ_PIN BpfCmd = 6
	// Open a file descriptor for the eBPF object pinned to the
	// specified pathname.
	BpfCmd_BPF_OBJ_GET BpfCmd = 7
	// Attach an eBPF program to a target_fd at the specified
	// attach_type hook.
	BpfCmd_BPF_PROG_ATTACH BpfCmd = 8
	// Detach the eBPF program associated with the target_fd at the
	// hook specified by attach_type.
	BpfCmd_BPF_PROG_DETACH BpfCmd = 9
	// Run the eBPF program associated with the prog_fd a repeat
	// number of times against a provided program context ctx_in and
	// data data_in, and return the modified program context
	// ctx_out, data_out (for example, packet data), result of the
	// execution retval, and duration of the test run.
	BpfCmd_BPF_PROG_TEST_RUN BpfCmd = 10
	// Fetch the next eBPF program currently loaded into the kernel.
	BpfCmd_BPF_PROG_GET_NEXT_ID BpfCmd = 11
	// Fetch the next eBPF map currently loaded into the kernel.
	BpfCmd_BPF_MAP_GET_NEXT_ID BpfCmd = 12
	// Open a file descriptor for the eBPF program corresponding to prog_id.
	BpfCmd_BPF_PROG_GET_FD_BY_ID BpfCmd = 13
	// Open a file descriptor for the eBPF map corresponding to map_id.
	BpfCmd_BPF_MAP_GET_FD_BY_ID BpfCmd = 14
	// Obtain information about the eBPF object corresponding to bpf_fd.
	BpfCmd_BPF_OBJ_GET_INFO_BY_FD BpfCmd = 15
	// Obtain information about eBPF programs associated with the specified
	// attach_type hook.
	BpfCmd_BPF_PROG_QUERY BpfCmd = 16
	// Attach an eBPF program to a tracepoint *name* to access kernel
	// internal arguments of the tracepoint in their raw form.
	BpfCmd_BPF_RAW_TRACEPOINT_OPEN BpfCmd = 17
	// Verify and load BPF Type Format (BTF) metadata into the kernel,
	// returning a new file descriptor associated with the metadata.
	BpfCmd_BPF_BTF_LOAD BpfCmd = 18
	// Open a file descriptor for the BPF Type Format (BTF)
	// corresponding to btf_id.
	BpfCmd_BPF_BTF_GET_FD_BY_ID BpfCmd = 19
	// Obtain information about eBPF programs associated with the target
	// process identified by pid and fd.
	BpfCmd_BPF_TASK_FD_QUERY BpfCmd = 20
	// Look up an element with the given key in the map referred to
	// by the file descriptor fd, and if found, delete the element.
	BpfCmd_BPF_MAP_LOOKUP_AND_DELETE_ELEM BpfCmd = 21
	// Freeze the permissions of the specified map.
	BpfCmd_BPF_MAP_FREEZE BpfCmd = 22
	// Fetch the next BPF Type Format (BTF) object currently loaded into
	// the kernel.
	BpfCmd_BPF_BTF_GET_NEXT_ID BpfCmd = 23
	// Iterate and fetch multiple elements in a map.
	BpfCmd_BPF_MAP_LOOKUP_BATCH BpfCmd = 24
	// Iterate and delete all elements in a map.
	BpfCmd_BPF_MAP_LOOKUP_AND_DELETE_BATCH BpfCmd = 25
	// Update multiple elements in a map by key.
	BpfCmd_BPF_MAP_UPDATE_BATCH BpfCmd = 26
	// Delete multiple elements in a map by key.
	BpfCmd_BPF_MAP_DELETE_BATCH BpfCmd = 27
	// Attach an eBPF program to a target_fd at the specified
	// attach_type hook and return a file descriptor handle for
	// managing the link.
	BpfCmd_BPF_LINK_CREATE BpfCmd = 28
	// Update the eBPF program in the specified link_fd to
	// new_prog_fd.
	BpfCmd_BPF_LINK_UPDATE BpfCmd = 29
	// Open a file descriptor for the eBPF Link corresponding to
	// link_id.
	BpfCmd_BPF_LINK_GET_FD_BY_ID BpfCmd = 30
	// Fetch the next eBPF link currently loaded into the kernel.
	BpfCmd_BPF_LINK_GET_NEXT_ID BpfCmd = 31
	// Enable eBPF runtime statistics gathering.
	BpfCmd_BPF_ENABLE_STATS BpfCmd = 32
	// Create an iterator on top of the specified link_fd (as
	// previously created using BPF_LINK_CREATE) and return a
	// file descriptor that can be used to trigger the iteration.
	BpfCmd_BPF_ITER_CREATE BpfCmd = 33
	// Forcefully detach the specified link_fd from its corresponding
	// attachment point.
	BpfCmd_BPF_LINK_DETACH BpfCmd = 34
	// Bind a map to the lifetime of an eBPF program.
	BpfCmd_BPF_PROG_BIND_MAP BpfCmd = 35
	// Create BPF token with embedded information about what can be
	// passed as an extra parameter to various bpf() syscall commands
	// to grant BPF subsystem functionality to unprivileged processes.
	BpfCmd_BPF_TOKEN_CREATE BpfCmd = 36
)

// Enum value maps for BpfCmd.
var (
	BpfCmd_name = map[int32]string{
		0:  "BPF_MAP_CREATE",
		1:  "BPF_MAP_LOOKUP_ELEM",
		2:  "BPF_MAP_UPDATE_ELEM",
		3:  "BPF_MAP_DELETE_ELEM",
		4:  "BPF_MAP_GET_NEXT_KEY",
		5:  "BPF_PROG_LOAD",
		6:  "BPF_OBJ_PIN",
		7:  "BPF_OBJ_GET",
		8:  "BPF_PROG_ATTACH",
		9:  "BPF_PROG_DETACH",
		10: "BPF_PROG_TEST_RUN",
		11: "BPF_PROG_GET_NEXT_ID",
		12: "BPF_MAP_GET_NEXT_ID",
		13: "BPF_PROG_GET_FD_BY_ID",
		14: "BPF_MAP_GET_FD_BY_ID",
		15: "BPF_OBJ_GET_INFO_BY_FD",
		16: "BPF_PROG_QUERY",
		17: "BPF_RAW_TRACEPOINT_OPEN",
		18: "BPF_BTF_LOAD",
		19: "BPF_BTF_GET_FD_BY_ID",
		20: "BPF_TASK_FD_QUERY",
		21: "BPF_MAP_LOOKUP_AND_DELETE_ELEM",
		22: "BPF_MAP_FREEZE",
		23: "BPF_BTF_GET_NEXT_ID",
		24: "BPF_MAP_LOOKUP_BATCH",
		25: "BPF_MAP_LOOKUP_AND_DELETE_BATCH",
		26: "BPF_MAP_UPDATE_BATCH",
		27: "BPF_MAP_DELETE_BATCH",
		28: "BPF_LINK_CREATE",
		29: "BPF_LINK_UPDATE",
		30: "BPF_LINK_GET_FD_BY_ID",
		31: "BPF_LINK_GET_NEXT_ID",
		32: "BPF_ENABLE_STATS",
		33: "BPF_ITER_CREATE",
		34: "BPF_LINK_DETACH",
		35: "BPF_PROG_BIND_MAP",
		36: "BPF_TOKEN_CREATE",
	}
	BpfCmd_value = map[string]int32{
		"BPF_MAP_CREATE":                  0,
		"BPF_MAP_LOOKUP_ELEM":             1,
		"BPF_MAP_UPDATE_ELEM":             2,
		"BPF_MAP_DELETE_ELEM":             3,
		"BPF_MAP_GET_NEXT_KEY":            4,
		"BPF_PROG_LOAD":                   5,
		"BPF_OBJ_PIN":                     6,
		"BPF_OBJ_GET":                     7,
		"BPF_PROG_ATTACH":                 8,
		"BPF_PROG_DETACH":                 9,
		"BPF_PROG_TEST_RUN":               10,
		"BPF_PROG_GET_NEXT_ID":            11,
		"BPF_MAP_GET_NEXT_ID":             12,
		"BPF_PROG_GET_FD_BY_ID":           13,
		"BPF_MAP_GET_FD_BY_ID":            14,
		"BPF_OBJ_GET_INFO_BY_FD":          15,
		"BPF_PROG_QUERY":                  16,
		"BPF_RAW_TRACEPOINT_OPEN":         17,
		"BPF_BTF_LOAD":                    18,
		"BPF_BTF_GET_FD_BY_ID":            19,
		"BPF_TASK_FD_QUERY":               20,
		"BPF_MAP_LOOKUP_AND_DELETE_ELEM":  21,
		"BPF_MAP_FREEZE":                  22,
		"BPF_BTF_GET_NEXT_ID":             23,
		"BPF_MAP_LOOKUP_BATCH":            24,
		"BPF_MAP_LOOKUP_AND_DELETE_BATCH": 25,
		"BPF_MAP_UPDATE_BATCH":            26,
		"BPF_MAP_DELETE_BATCH":            27,
		"BPF_LINK_CREATE":                 28,
		"BPF_LINK_UPDATE":                 29,
		"BPF_LINK_GET_FD_BY_ID":           30,
		"BPF_LINK_GET_NEXT_ID":            31,
		"BPF_ENABLE_STATS":                32,
		"BPF_ITER_CREATE":                 33,
		"BPF_LINK_DETACH":                 34,
		"BPF_PROG_BIND_MAP":               35,
		"BPF_TOKEN_CREATE":                36,
	}
)

func (x BpfCmd) Enum() *BpfCmd {
	p := new(BpfCmd)
	*p = x
	return p
}

type BpfProgramType int32

const (
	BpfProgramType_BPF_PROG_TYPE_UNSPEC                  BpfProgramType = 0
	BpfProgramType_BPF_PROG_TYPE_SOCKET_FILTER           BpfProgramType = 1
	BpfProgramType_BPF_PROG_TYPE_KPROBE                  BpfProgramType = 2
	BpfProgramType_BPF_PROG_TYPE_SCHED_CLS               BpfProgramType = 3
	BpfProgramType_BPF_PROG_TYPE_SCHED_ACT               BpfProgramType = 4
	BpfProgramType_BPF_PROG_TYPE_TRACEPOINT              BpfProgramType = 5
	BpfProgramType_BPF_PROG_TYPE_XDP                     BpfProgramType = 6
	BpfProgramType_BPF_PROG_TYPE_PERF_EVENT              BpfProgramType = 7
	BpfProgramType_BPF_PROG_TYPE_CGROUP_SKB              BpfProgramType = 8
	BpfProgramType_BPF_PROG_TYPE_CGROUP_SOCK             BpfProgramType = 9
	BpfProgramType_BPF_PROG_TYPE_LWT_IN                  BpfProgramType = 10
	BpfProgramType_BPF_PROG_TYPE_LWT_OUT                 BpfProgramType = 11
	BpfProgramType_BPF_PROG_TYPE_LWT_XMIT                BpfProgramType = 12
	BpfProgramType_BPF_PROG_TYPE_SOCK_OPS                BpfProgramType = 13
	BpfProgramType_BPF_PROG_TYPE_SK_SKB                  BpfProgramType = 14
	BpfProgramType_BPF_PROG_TYPE_CGROUP_DEVICE           BpfProgramType = 15
	BpfProgramType_BPF_PROG_TYPE_SK_MSG                  BpfProgramType = 16
	BpfProgramType_BPF_PROG_TYPE_RAW_TRACEPOINT          BpfProgramType = 17
	BpfProgramType_BPF_PROG_TYPE_CGROUP_SOCK_ADDR        BpfProgramType = 18
	BpfProgramType_BPF_PROG_TYPE_LWT_SEG6LOCAL           BpfProgramType = 19
	BpfProgramType_BPF_PROG_TYPE_LIRC_MODE2              BpfProgramType = 20
	BpfProgramType_BPF_PROG_TYPE_SK_REUSEPORT            BpfProgramType = 21
	BpfProgramType_BPF_PROG_TYPE_FLOW_DISSECTOR          BpfProgramType = 22
	BpfProgramType_BPF_PROG_TYPE_CGROUP_SYSCTL           BpfProgramType = 23
	BpfProgramType_BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE BpfProgramType = 24
	BpfProgramType_BPF_PROG_TYPE_CGROUP_SOCKOPT          BpfProgramType = 25
	BpfProgramType_BPF_PROG_TYPE_TRACING                 BpfProgramType = 26
	BpfProgramType_BPF_PROG_TYPE_STRUCT_OPS              BpfProgramType = 27
	BpfProgramType_BPF_PROG_TYPE_EXT                     BpfProgramType = 28
	BpfProgramType_BPF_PROG_TYPE_LSM                     BpfProgramType = 29
	BpfProgramType_BPF_PROG_TYPE_SK_LOOKUP               BpfProgramType = 30
	BpfProgramType_BPF_PROG_TYPE_SYSCALL                 BpfProgramType = 31
	BpfProgramType_BPF_PROG_TYPE_NETFILTER               BpfProgramType = 32
)

// Enum value maps for BpfProgramType.
var (
	BpfProgramType_name = map[int32]string{
		0:  "BPF_PROG_TYPE_UNSPEC",
		1:  "BPF_PROG_TYPE_SOCKET_FILTER",
		2:  "BPF_PROG_TYPE_KPROBE",
		3:  "BPF_PROG_TYPE_SCHED_CLS",
		4:  "BPF_PROG_TYPE_SCHED_ACT",
		5:  "BPF_PROG_TYPE_TRACEPOINT",
		6:  "BPF_PROG_TYPE_XDP",
		7:  "BPF_PROG_TYPE_PERF_EVENT",
		8:  "BPF_PROG_TYPE_CGROUP_SKB",
		9:  "BPF_PROG_TYPE_CGROUP_SOCK",
		10: "BPF_PROG_TYPE_LWT_IN",
		11: "BPF_PROG_TYPE_LWT_OUT",
		12: "BPF_PROG_TYPE_LWT_XMIT",
		13: "BPF_PROG_TYPE_SOCK_OPS",
		14: "BPF_PROG_TYPE_SK_SKB",
		15: "BPF_PROG_TYPE_CGROUP_DEVICE",
		16: "BPF_PROG_TYPE_SK_MSG",
		17: "BPF_PROG_TYPE_RAW_TRACEPOINT",
		18: "BPF_PROG_TYPE_CGROUP_SOCK_ADDR",
		19: "BPF_PROG_TYPE_LWT_SEG6LOCAL",
		20: "BPF_PROG_TYPE_LIRC_MODE2",
		21: "BPF_PROG_TYPE_SK_REUSEPORT",
		22: "BPF_PROG_TYPE_FLOW_DISSECTOR",
		23: "BPF_PROG_TYPE_CGROUP_SYSCTL",
		24: "BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE",
		25: "BPF_PROG_TYPE_CGROUP_SOCKOPT",
		26: "BPF_PROG_TYPE_TRACING",
		27: "BPF_PROG_TYPE_STRUCT_OPS",
		28: "BPF_PROG_TYPE_EXT",
		29: "BPF_PROG_TYPE_LSM",
		30: "BPF_PROG_TYPE_SK_LOOKUP",
		31: "BPF_PROG_TYPE_SYSCALL",
		32: "BPF_PROG_TYPE_NETFILTER",
	}
	BpfProgramType_value = map[string]int32{
		"BPF_PROG_TYPE_UNSPEC":                  0,
		"BPF_PROG_TYPE_SOCKET_FILTER":           1,
		"BPF_PROG_TYPE_KPROBE":                  2,
		"BPF_PROG_TYPE_SCHED_CLS":               3,
		"BPF_PROG_TYPE_SCHED_ACT":               4,
		"BPF_PROG_TYPE_TRACEPOINT":              5,
		"BPF_PROG_TYPE_XDP":                     6,
		"BPF_PROG_TYPE_PERF_EVENT":              7,
		"BPF_PROG_TYPE_CGROUP_SKB":              8,
		"BPF_PROG_TYPE_CGROUP_SOCK":             9,
		"BPF_PROG_TYPE_LWT_IN":                  10,
		"BPF_PROG_TYPE_LWT_OUT":                 11,
		"BPF_PROG_TYPE_LWT_XMIT":                12,
		"BPF_PROG_TYPE_SOCK_OPS":                13,
		"BPF_PROG_TYPE_SK_SKB":                  14,
		"BPF_PROG_TYPE_CGROUP_DEVICE":           15,
		"BPF_PROG_TYPE_SK_MSG":                  16,
		"BPF_PROG_TYPE_RAW_TRACEPOINT":          17,
		"BPF_PROG_TYPE_CGROUP_SOCK_ADDR":        18,
		"BPF_PROG_TYPE_LWT_SEG6LOCAL":           19,
		"BPF_PROG_TYPE_LIRC_MODE2":              20,
		"BPF_PROG_TYPE_SK_REUSEPORT":            21,
		"BPF_PROG_TYPE_FLOW_DISSECTOR":          22,
		"BPF_PROG_TYPE_CGROUP_SYSCTL":           23,
		"BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE": 24,
		"BPF_PROG_TYPE_CGROUP_SOCKOPT":          25,
		"BPF_PROG_TYPE_TRACING":                 26,
		"BPF_PROG_TYPE_STRUCT_OPS":              27,
		"BPF_PROG_TYPE_EXT":                     28,
		"BPF_PROG_TYPE_LSM":                     29,
		"BPF_PROG_TYPE_SK_LOOKUP":               30,
		"BPF_PROG_TYPE_SYSCALL":                 31,
		"BPF_PROG_TYPE_NETFILTER":               32,
	}
)

func (x BpfProgramType) Enum() *BpfProgramType {
	p := new(BpfProgramType)
	*p = x
	return p
}
