// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: notification.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationController_Create_FullMethodName          = "/notification.NotificationController/Create"
	NotificationController_Read_FullMethodName            = "/notification.NotificationController/Read"
	NotificationController_Update_FullMethodName          = "/notification.NotificationController/Update"
	NotificationController_Delete_FullMethodName          = "/notification.NotificationController/Delete"
	NotificationController_List_FullMethodName            = "/notification.NotificationController/List"
	NotificationController_DefaultTemplate_FullMethodName = "/notification.NotificationController/DefaultTemplate"
)

// NotificationControllerClient is the client API for NotificationController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The NotificationController service definition.
type NotificationControllerClient interface {
	Create(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*CreateNotificationResp, error)
	Read(ctx context.Context, in *ReadNotificationReq, opts ...grpc.CallOption) (*ReadNotificationResp, error)
	Update(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteNotificationReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListNotificationReq, opts ...grpc.CallOption) (*ListNotificationResp, error)
	DefaultTemplate(ctx context.Context, in *DefaultTemplateReq, opts ...grpc.CallOption) (*DefaultTemplateResp, error)
}

type notificationControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationControllerClient(cc grpc.ClientConnInterface) NotificationControllerClient {
	return &notificationControllerClient{cc}
}

func (c *notificationControllerClient) Create(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*CreateNotificationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNotificationResp)
	err := c.cc.Invoke(ctx, NotificationController_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationControllerClient) Read(ctx context.Context, in *ReadNotificationReq, opts ...grpc.CallOption) (*ReadNotificationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadNotificationResp)
	err := c.cc.Invoke(ctx, NotificationController_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationControllerClient) Update(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NotificationController_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationControllerClient) Delete(ctx context.Context, in *DeleteNotificationReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NotificationController_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationControllerClient) List(ctx context.Context, in *ListNotificationReq, opts ...grpc.CallOption) (*ListNotificationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationResp)
	err := c.cc.Invoke(ctx, NotificationController_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationControllerClient) DefaultTemplate(ctx context.Context, in *DefaultTemplateReq, opts ...grpc.CallOption) (*DefaultTemplateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultTemplateResp)
	err := c.cc.Invoke(ctx, NotificationController_DefaultTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationControllerServer is the server API for NotificationController service.
// All implementations must embed UnimplementedNotificationControllerServer
// for forward compatibility.
//
// The NotificationController service definition.
type NotificationControllerServer interface {
	Create(context.Context, *Notification) (*CreateNotificationResp, error)
	Read(context.Context, *ReadNotificationReq) (*ReadNotificationResp, error)
	Update(context.Context, *Notification) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteNotificationReq) (*emptypb.Empty, error)
	List(context.Context, *ListNotificationReq) (*ListNotificationResp, error)
	DefaultTemplate(context.Context, *DefaultTemplateReq) (*DefaultTemplateResp, error)
	mustEmbedUnimplementedNotificationControllerServer()
}

// UnimplementedNotificationControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationControllerServer struct{}

func (UnimplementedNotificationControllerServer) Create(context.Context, *Notification) (*CreateNotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNotificationControllerServer) Read(context.Context, *ReadNotificationReq) (*ReadNotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedNotificationControllerServer) Update(context.Context, *Notification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNotificationControllerServer) Delete(context.Context, *DeleteNotificationReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNotificationControllerServer) List(context.Context, *ListNotificationReq) (*ListNotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNotificationControllerServer) DefaultTemplate(context.Context, *DefaultTemplateReq) (*DefaultTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultTemplate not implemented")
}
func (UnimplementedNotificationControllerServer) mustEmbedUnimplementedNotificationControllerServer() {
}
func (UnimplementedNotificationControllerServer) testEmbeddedByValue() {}

// UnsafeNotificationControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationControllerServer will
// result in compilation errors.
type UnsafeNotificationControllerServer interface {
	mustEmbedUnimplementedNotificationControllerServer()
}

func RegisterNotificationControllerServer(s grpc.ServiceRegistrar, srv NotificationControllerServer) {
	// If the following call pancis, it indicates UnimplementedNotificationControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationController_ServiceDesc, srv)
}

func _NotificationController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationControllerServer).Create(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationController_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationControllerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationController_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationControllerServer).Read(ctx, req.(*ReadNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationControllerServer).Update(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationControllerServer).Delete(ctx, req.(*DeleteNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationControllerServer).List(ctx, req.(*ListNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationController_DefaultTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationControllerServer).DefaultTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationController_DefaultTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationControllerServer).DefaultTemplate(ctx, req.(*DefaultTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationController_ServiceDesc is the grpc.ServiceDesc for NotificationController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationController",
	HandlerType: (*NotificationControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NotificationController_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _NotificationController_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NotificationController_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NotificationController_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NotificationController_List_Handler,
		},
		{
			MethodName: "DefaultTemplate",
			Handler:    _NotificationController_DefaultTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}
