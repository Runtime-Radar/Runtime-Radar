// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: integration.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntegrationController_Create_FullMethodName = "/integration.IntegrationController/Create"
	IntegrationController_Read_FullMethodName   = "/integration.IntegrationController/Read"
	IntegrationController_Update_FullMethodName = "/integration.IntegrationController/Update"
	IntegrationController_Delete_FullMethodName = "/integration.IntegrationController/Delete"
	IntegrationController_List_FullMethodName   = "/integration.IntegrationController/List"
)

// IntegrationControllerClient is the client API for IntegrationController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationControllerClient interface {
	Create(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*CreateIntegrationResp, error)
	Read(ctx context.Context, in *ReadIntegrationReq, opts ...grpc.CallOption) (*Integration, error)
	Update(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteIntegrationReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListIntegrationReq, opts ...grpc.CallOption) (*ListIntegrationResp, error)
}

type integrationControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationControllerClient(cc grpc.ClientConnInterface) IntegrationControllerClient {
	return &integrationControllerClient{cc}
}

func (c *integrationControllerClient) Create(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*CreateIntegrationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIntegrationResp)
	err := c.cc.Invoke(ctx, IntegrationController_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationControllerClient) Read(ctx context.Context, in *ReadIntegrationReq, opts ...grpc.CallOption) (*Integration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Integration)
	err := c.cc.Invoke(ctx, IntegrationController_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationControllerClient) Update(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IntegrationController_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationControllerClient) Delete(ctx context.Context, in *DeleteIntegrationReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IntegrationController_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationControllerClient) List(ctx context.Context, in *ListIntegrationReq, opts ...grpc.CallOption) (*ListIntegrationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntegrationResp)
	err := c.cc.Invoke(ctx, IntegrationController_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationControllerServer is the server API for IntegrationController service.
// All implementations must embed UnimplementedIntegrationControllerServer
// for forward compatibility.
type IntegrationControllerServer interface {
	Create(context.Context, *Integration) (*CreateIntegrationResp, error)
	Read(context.Context, *ReadIntegrationReq) (*Integration, error)
	Update(context.Context, *Integration) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteIntegrationReq) (*emptypb.Empty, error)
	List(context.Context, *ListIntegrationReq) (*ListIntegrationResp, error)
	mustEmbedUnimplementedIntegrationControllerServer()
}

// UnimplementedIntegrationControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntegrationControllerServer struct{}

func (UnimplementedIntegrationControllerServer) Create(context.Context, *Integration) (*CreateIntegrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIntegrationControllerServer) Read(context.Context, *ReadIntegrationReq) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedIntegrationControllerServer) Update(context.Context, *Integration) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIntegrationControllerServer) Delete(context.Context, *DeleteIntegrationReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIntegrationControllerServer) List(context.Context, *ListIntegrationReq) (*ListIntegrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIntegrationControllerServer) mustEmbedUnimplementedIntegrationControllerServer() {}
func (UnimplementedIntegrationControllerServer) testEmbeddedByValue()                               {}

// UnsafeIntegrationControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationControllerServer will
// result in compilation errors.
type UnsafeIntegrationControllerServer interface {
	mustEmbedUnimplementedIntegrationControllerServer()
}

func RegisterIntegrationControllerServer(s grpc.ServiceRegistrar, srv IntegrationControllerServer) {
	// If the following call pancis, it indicates UnimplementedIntegrationControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntegrationController_ServiceDesc, srv)
}

func _IntegrationController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationControllerServer).Create(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationController_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadIntegrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationControllerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationController_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationControllerServer).Read(ctx, req.(*ReadIntegrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationController_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationControllerServer).Update(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationController_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntegrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationControllerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationController_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationControllerServer).Delete(ctx, req.(*DeleteIntegrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationControllerServer).List(ctx, req.(*ListIntegrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationController_ServiceDesc is the grpc.ServiceDesc for IntegrationController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integration.IntegrationController",
	HandlerType: (*IntegrationControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IntegrationController_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _IntegrationController_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IntegrationController_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IntegrationController_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _IntegrationController_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integration.proto",
}
