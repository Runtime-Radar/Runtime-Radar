syntax = "proto3";

// Package is called "runtime_config" in order to distinguish it from future more generic "config" package
// which could be used for keeping dynamic config interfaces exposed by cs_manager, however this is not yet implemented.
package runtime_config;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option go_package = "./api";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Event Processor Config API";
  };
};

// The ConfigController service definition.
service ConfigController {
    rpc Add(Config) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/config/event-processor"
            body: "*"
        };
    }
    rpc Read(google.protobuf.Empty) returns (Config)  {
        option (google.api.http) = {
            get: "/api/v1/config/event-processor"
        };
    }
}

message Config {
    string id = 1;
    reserved 2,3; // reserved for created_at, updated_at in case we decide to expose them

    message ConfigJSON {
        string version = 1;

        enum HistoryControl {
            // Do not save processed events
            NONE = 0;
            // Save only events with at least one threat detected
            WITH_THREATS = 1;
            // Save all events after processing
            ALL = 2;
        }
        HistoryControl history_control = 2;
    }
    ConfigJSON config = 4;
}
