syntax = "proto3";

// Package is called "runtime_config" in order to distinguish it from future more generic "config" package
// which could be used for keeping dynamic config interfaces exposed by cs_manager, however this is not yet implemented.
package runtime_config;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "tetragon/events.proto";


option go_package = "./api";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Runtime Monitor Config API";
  };
};

// The ConfigController service definition.
service ConfigController {
    rpc Add(Config) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/config/runtime-monitor"
            body: "*"
        };
    }
    rpc Read(google.protobuf.Empty) returns (Config)  {
        option (google.api.http) = {
            get: "/api/v1/config/runtime-monitor"
        };
    }
}

message Config {
    string id = 1;
    reserved 2,3; // reserved for created_at, updated_at in case we decide to expose them

    message ConfigJSON {
        string version = 1;

        map<string, TracingPolicy> tracing_policies = 2;

        // Tetragon options
        // ================
        // allow_list specifies a list of filters to apply to only return certain
        // events. If multiple filters are specified, at least one of them has to
        // match for an event to be included in the results.
        repeated tetragon.Filter allow_list = 4;
        // deny_list specifies a list of filters to apply to exclude certain events
        // from the results. If multiple filters are specified, at least one of
        // them has to match for an event to be excluded.
        // If both allow_list and deny_list are specified, the results contain the
        // set difference allow_list - deny_list.
        repeated tetragon.Filter deny_list = 5;
        // aggregation_options configures aggregation options for this request.
        // If this field is not set, responses will not be aggregated.
        // Note that currently only process_accept and process_connect events are
        // aggregated. Other events remain unaggregated.
        tetragon.AggregationOptions aggregation_options = 6;
    }
    ConfigJSON config = 4;
}

message TracingPolicy {
    string name = 1;
    string description = 2;
    string yaml = 3;
    bool enabled = 4;
}
