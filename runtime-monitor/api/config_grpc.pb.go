// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: config.proto

// Package is called "runtime_config" in order to distinguish it from future more generic "config" package
// which could be used for keeping dynamic config interfaces exposed by cs_manager, however this is not yet implemented.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigController_Add_FullMethodName  = "/runtime_config.ConfigController/Add"
	ConfigController_Read_FullMethodName = "/runtime_config.ConfigController/Read"
)

// ConfigControllerClient is the client API for ConfigController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigControllerClient interface {
	Add(ctx context.Context, in *Config, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Read(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error)
}

type configControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigControllerClient(cc grpc.ClientConnInterface) ConfigControllerClient {
	return &configControllerClient{cc}
}

func (c *configControllerClient) Add(ctx context.Context, in *Config, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configControllerClient) Read(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, ConfigController_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigControllerServer is the server API for ConfigController service.
// All implementations must embed UnimplementedConfigControllerServer
// for forward compatibility
type ConfigControllerServer interface {
	Add(context.Context, *Config) (*emptypb.Empty, error)
	Read(context.Context, *emptypb.Empty) (*Config, error)
	mustEmbedUnimplementedConfigControllerServer()
}

// UnimplementedConfigControllerServer must be embedded to have forward compatible implementations.
type UnimplementedConfigControllerServer struct {
}

func (UnimplementedConfigControllerServer) Add(context.Context, *Config) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedConfigControllerServer) Read(context.Context, *emptypb.Empty) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedConfigControllerServer) mustEmbedUnimplementedConfigControllerServer() {}

// UnsafeConfigControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigControllerServer will
// result in compilation errors.
type UnsafeConfigControllerServer interface {
	mustEmbedUnimplementedConfigControllerServer()
}

func RegisterConfigControllerServer(s grpc.ServiceRegistrar, srv ConfigControllerServer) {
	s.RegisterService(&ConfigController_ServiceDesc, srv)
}

func _ConfigController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigControllerServer).Add(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigController_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigControllerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigController_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigControllerServer).Read(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigController_ServiceDesc is the grpc.ServiceDesc for ConfigController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runtime_config.ConfigController",
	HandlerType: (*ConfigControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ConfigController_Add_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ConfigController_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
